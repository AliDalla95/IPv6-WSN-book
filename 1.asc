== Short introduction to Contiki

What is Contiki OS, how do I install it?, everything should already be pre-installed in _Instant Contiki_!

* Meet the Zolertia Z1 mote: identify sensors, connectors, antenna.

* Check the installation: test the toolchain installation with the _hello world_ example

My first application: hello world with LEDs:

* Use the LEDs and printf to debug.
* Change timer values, triggers.

Adding sensors: analogue and digital

* Difference between both, basics.
* How to connect and read: ADC, I2C.

Our first application: relay data over the serial port to Ubidots.

=== What is Contiki OS?

Contiki is an open source operating system for the Internet of Things, it connects tiny low-cost, low-power microcontrollers to the Internet.

image::./images/1/image10.png[]

Contiki provides powerful low-power Internet communication, it supports fully standard IPv6 and IPv4, along with the recent low-power wireless standards: 6lowpan, RPL, CoAP. With Contiki's ContikiMAC and sleepy routers, even wireless routers can be battery-operated.

With Contiki, development is easy and fast: Contiki applications are written in standard C, with the Cooja simulator Contiki networks can be emulated before burned into hardware, and Instant Contiki provides an entire development environment in a single download.

More information available at:

http://contiki-os.org/


=== Install VMWare for your platform

On Windows and Linux:
https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/6_0

On OSX you can download VMWare Fusion: http://www.vmware.com/products/fusion


=== Download Instant Contiki:
Instant Contiki is an entire Contiki development environment in a single download. It is an Ubuntu Linux virtual machine and has Contiki OS and all the development tools, compilers, and simulators required already pre-installed.
http://www.contiki-os.org/start.html

Download the 23-bit version: `Instant_Contiki_Ubuntu_12.04_32-bit.vmdk`

=== Start Instant Contiki
Using VMWare just open the InstantContiki2.7.vmx file, if prompted about the VM source just choose "I copied it", then wait for the virtual Ubuntu Linux boot up.

Log into Instant Contiki. The password and user name is *user*. Don’t upgrade right now.

=== Updating to the latest Contiki release

The Contiki OS git repository is hosted at Github, actively developed by a growing community of developers and enthusiasts, track the current work and don't miss the latest features and improvements at:

https://github.com/contiki-os/contiki.

.What is GIT
****

*Git* is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.   The main difference with previous change control tools like Subversion, is the possibility to work locally as your local copy is a repository, and you can commit to it and get all benefits of source control.  Making branches and merging between branches is really easy.

There are some great tutorials online to learn more about GIT:

http://try.github.io

http://excess.org/article/2008/07/ogre-git-tutorial/

A nice graphical introduction to git: http://rogerdudler.github.io/git-guide/

*GitHub* is a GIT repository  web-based hosting service, which offers all of the distributed revision control and source code management (SCM) functionality of Git as well as adding its own features. Unlike Git, which is strictly a command-line tool, GitHub provides a web-based graphical interface and desktop as well as mobile integration. It also provides access control and several collaboration features such as wikis, task management, bug tracking and feature requests for every project.

image::./images/1/image00.png[]

The advantage of using GIT and hosting the code at github is that of allowing people to fork the code, develop on its own, and then contribute back and share your progress.
****

To update the Instant Contiki source code to the latest commit available, open a terminal and write:

[source]
----
cd $HOME/contiki
git fetch origin master
git pull origin master
----

This will synchronize and download the latest code at the _master_ branch; to visualize the commit history just type:

[source]
----
git log
----

As we will be working on Contiki OS and changing/adding our own code, let's create a _work_ branch by typing:

[source]
----
git checkout -b work
----

=== Zolertia Z1 platform

For the remainder of the exercises we will use the *Zolertia Z1 mote* as the target development platform.

image::./images/1/image03.png[]

The Z1 mote features a second generation MSP430F2617 low power 16-bit RISC CPU @16 MHz MCU, 8 kB RAM and a 92 kB Flash memory.  Also includes the well known CC2420 transceiver, IEEE 802.15.4 compliant, which operates at 2.4 GHz with an effective data rate of 250 kbps.

The Zolertia Z1 mote can run TinyOS, Contiki OS, OpenWSN and RIOT, and has been used actively over 5 years now in Universities, Research and development centers and commercial products in more than 43 countries and has been featured in more than 50 scientific publications.

More information can be found at:
http://www.zolertia.io

=== Check the toolchain version and installation

Open a terminal and write:
[source, perl]
msp430-gcc --version

The output should be the following:

[source]
----
msp430-gcc (GCC) 4.7.0 20120322 (mspgcc dev 20120716)
Copyright (C) 2012 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
----
To install the toolchain yourself (not required if it is already installed), dounload it from here:         http://sourceforge.net/projects/zolertia/files/Toolchain/

Afterwards just decompress (in the home directory for example) and include its path by editing the profile session:
[source]
----
sudo gedit /home/user/.bashrc
----
And add at the end the following:
[source]
----
export PATH=$PATH:/home/user/msp430-47/bin
----

=== Contiki structure

image::./images/1/image11.png[]

* examples: Contiki's ready to build examples, at examples/z1 you will find specific Zolertia related examples.
* app: Contiki applications.

* cpu: specific MCU files, the /cpu/msp430/ folder contains the drivers of the MCU used by the Z1 mote.

* platform: specific device files and drivers, platform/z1/ has specific drivers and configuration for the Z1 mote.

* core: Contiki's filesystem and core components.

* tools: a variety of tools for debugging, simulating and enhancing your Z1 applications.  in tools/z1 there are specific tools such as the BSL script for programming the devices.  Also two simulation tools provided by Contiki: COOJA and MSPSim are also included.

* doc: self-generated Doxygen documentation.

* regression-tests: set of nightly regression tests that test important aspects of Contiki on a daily basis

=== Check installation: examples

Let's compile our first Contiki example! Open a terminal and write:

[source]
----
cd examples/hello-world
make TARGET=z1 savetarget
----
So it knows that when you compile you do so for the z1 mote. You need to do this only once per application.

[source]
----
make hello-world
----

To start compiling the code (ignore the warnings), if everything works OK you should see something like:

[source]
----
CC        symbols.c
AR        contiki-z1.a
CC        hello-world.c
CC        ../../platform/z1/./contiki-z1-main.c
LD        hello-world.z1
rm obj_z1/contiki-z1-main.o hello-world.co
----
The *hello-world.z1* file should have been created and we are ready to flash the application to the device.


=== Check z1 connection to the virtual machine
Connect the Z1 mote via USB using a regular micro-USB cable, the VMWare instance should recognize the device as follows:

* In VM player: Player -> Removable Devices -> Signal Integrated Zolertia Z1 -> Connect

* In VMWare Fusion: Devices -> USB Devices -> Silicon Labs Zolertia Z1

Write in the previous terminal:
[source]
----
make z1-motelist
../../tools/z1/motelist-z1
Reference  Device               Description
--------------------------------------------------
Z1RC0336   /dev/ttyUSB0   Silicon Labs Zolertia Z1
----
This will list the Z1 motes connected to the Virtual Machine (you can have several at the same time).

Save the reference ID for next lab sessions (Z1RC0336). Each mote has a unique reference number. The port name is useful for programming and debugging.

Now upload the precompiled Hello World application to the Z1 mote.

[source]
----
make hello-world.upload  MOTES=/dev/ttyUSB0
----
if you don’t use the _MOTES_ argument, the system will install on the first device it finds. It is OK if you only have one device.

.If you get this error:
****
[source]
----
serial.serialutil.SerialException: could not open port /dev/ttyUSB0: [Errno 13] Permission denied: '/dev/ttyUSB0'
----
You need to add yourself to the _dialout_ group of Linux.  You can do it as follows:

[source]
----
sudo usermod -a -G dialout user
----
Enter the root password, which is *user* then reboot.

[source]
----
sudo reboot
----
****

To restart the Z1 mote and visualize the debug output in the terminal, let's chain the following commands:

[source]
----
make hello-world.upload && make z1-reset && make login
----

The Z1 mote prints to the console over the USB port the debug information from the application.

[source, ruby]
----
connecting to /dev/ttyUSB0 (115200) [OK]
Rime started with address 193.12.0.0.0.0.0.158
MAC c1:0c:00:00:00:00:00:9e Ref ID: 158
Contiki-2.6-2067-g2734c97 started. Node id is set to 158.
CSMA ContikiMAC, channel check rate 8 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:009e
Starting 'Hello world process'
Hello, world
----

Note that the node ID is displayed as well as the MAC address.

.Quick Z1 cheat sheet
****
The Makefile.z1 provides useful commands platform/z1/Makefile.z1, which is included when TARGET=z1 is passed to the command line, use the command `make` with the following:

* `savetarget`: save the z1 platform as default target inside the Makefile.target file, from now on we can compile by just typing make without TARGET=z1
* `z1-motes`: list the devices of the z1 motes connected to the computer.
* `z1-motelist`: list the reference of the z1 motes connected to the computer, along with the device.
* `z1-reset`: reset the connected nodes.
* `z1-upload`: load a previously compiled tmpimage.ihex to the z1 mote.
* `linslip`: makes a serial connection over IP to the node.
* `serialdump`: print the timestamp and the output of the z1 mote.
* `serialview`: same as serialdump, but allows interaction with the z1 mote.
* `login`: prints the output of the connected node, without the timestamp.
* `MOTES=/dev/ttyUSBX`: points out the device to the bsl
****

== My first applications

=== Hello world with LEDs

Let’s see the main components of the Hello World example.  View the code with:

[source]
----
gedit hello-world.c
----
When starting Contiki, you declare processes with a name. In each code you can have several processes.
You declare the process like this:

[source,ruby]
----
PROCESS(hello_world_process, "Hello world process"); // <1>
AUTOSTART_PROCESSES(&hello_world_process); // <2>
----
<1> hello_world_process is the name of the process and
"Hello world process" is the readable name of the process when you print it to the terminal.
<2> The AUTOSTART_PROCESSES(&hello_world_process); tells Contiki to start that process when it finishes booting.

[source,ruby]
----
/*-------------------------------------------------*/
PROCESS(hello_world_process, "Hello world process");
AUTOSTART_PROCESSES(&hello_world_process);
/*-------------------------------------------------*/
PROCESS_THREAD(hello_world_process, ev, data) <1>
{
  PROCESS_BEGIN(); <2>
  printf("Hello, world\n"); <3>
  PROCESS_END(); <4>
}
----
<1> You declare the content of the process in the process thread. You have the name of the process and callback functions (event handler and data handler).
<2> Inside the thread you begin the process,
<3> do what you want and
<4> finally end the process.

The next step is adding an LED and the user button.

Let’s create a new file at:

[source]
----
cd examples/z1
----
Let’s name the new file `test_led.c` with

[source]
----
gedit test_led.c.
----
You have to add the `dev/leds.h` which is the library to manage the LEDs (light emitting diodes).  To check the available functions go to `/home/user/contiki/core/dev/leds.h`.

Available LEDs commands:
[source]
----
unsigned char leds_get(void);
void leds_set(unsigned char leds);
void leds_on(unsigned char leds);
void leds_off(unsigned char leds);
void leds_toggle(unsigned char leds);
----
Available LEDs:
[source]
----
LEDS_GREEN
LEDS_RED
LEDS_BLUE
LEDS_ALL
----

Now try to turn ON only the red LED and see what happens

[source, pearl]
----
#include "contiki.h"
#include "dev/leds.h"
#include <stdio.h>
/*-------------------------------------------------*/
PROCESS(led_process, "led process");
AUTOSTART_PROCESSES(&led_process);
/*-------------------------------------------------*/
PROCESS_THREAD(led_process, ev, data)
{
  PROCESS_BEGIN();
  leds_on(LEDS_RED);
  PROCESS_END();
}
----

We now need to add the project to the `Makefile` so when running the _make_ command it will be compiled.

[source]
----
CONTIKI_PROJECT += test_led
----
Now let’s compile and upload the new project with:

 make clean && make test_led.upload

The _make clean_ command is used to erase previously compiled objects, this is *very important* because if you make changes to the source code, you must rebuild the files, otherwise your change might not be pulled in.

Now the red LED should be ON!

TIP: Exercise: try to switch on the other LEDs.


=== Printf

You can use printf to visualize on the console what is happening in your application.  It is really useful to debug your code, as you can print for istance values of variables, when certain block of code is being executed, etc.
Let’s try to print the status of the LED, using the `unsigned char leds_get(void);` function that is available in the documented functions (see above).
Get the LED status and print its status on the screen.

[source, ruby]
----
#include "contiki.h"
#include "dev/leds.h"
#include <stdio.h>
char hello[] = "hello from the mote!";
/*-------------------------------------------------*/
PROCESS(led_process, "led process");
AUTOSTART_PROCESSES(&led_process);
/*-------------------------------------------------*/
PROCESS_THREAD(led_process, ev, data)
{
  PROCESS_BEGIN();
  leds_on(LEDS_RED);
  printf("%s\n", hello);
  printf("The LED %u is %u\n", LEDS_RED, leds_get());
  PROCESS_END();
}
----

If one LED is on, you will get the LED number (LEDs are numbered 1, 2 and 4).

TIP: Exercise: what happens when you turn on more than one LED? What number do you get?

=== Button

We now want to detect if the *user button* has been pressed.

Create a new file in `/home/user/contiki/examples/z1` called `test_button.c`
The button in Contiki is considered as a sensor. We are going to use the `core/dev/button-sensor.h` library.  It is a good practice to give the process a meaningful name so it reflects what the process is about.
Here is the code to print the button status:

[source, ruby]
----
#include "contiki.h"
#include "dev/leds.h"
#include "dev/button-sensor.h"
#include <stdio.h>
/*-------------------------------------------------*/
PROCESS(button_process, "button process");
AUTOSTART_PROCESSES(&button_process);
/*-------------------------------------------------*/
PROCESS_THREAD(button_process, ev, data)
{
  PROCESS_BEGIN();
  SENSORS_ACTIVATE(button_sensor);
  while(1) {
    PROCESS_WAIT_EVENT_UNTIL((ev==sensors_event) &&
                            (data == &button_sensor)); <1>
    printf("I pushed the button! \n");
  }
  PROCESS_END();
}
----

Let’s modify the `Makefile` to add the new file.

[source]
----
CONTIKI_PROJECT += test_button
----
You can leave the previously created test_led in the makefile.
This process has an infinite loop (given by the wait()) to wait for the button the be pressed.  The two conditions have to be met (event from a sensor and that event is the button being pressed), as soon as you press the button, you get the string printed.

TIP: Exercise: switch on the LED when the button is pressed. Switch off the LED when the button is pressed again.

=== Timers
Using timers will allow us to trigger events at a given time, speeding up the transition from one state to another and making a given process or task automated, for example blinking an LED every 5 seconds, without the user having to press the button each time.

Contiki OS provides 4 kind of timers:

* Simple timer: A simple ticker, the application should check _manually_ if the timer has expired.  More information at `core/sys/timer.h`.
* Callback timer: When a timer expires it can callback a given function. More information at `core/sys/ctimer.h`.
* Event timer: Same as above, but instead of calling a function, when the timer expires it posts an event signaling its expiration. More information at `core/sys/etimer.h`.
* Real time timer: The real-time module handles the scheduling and execution of real-time tasks, there's only 1 timer available at the moment.  More information at `core/sys/rtimer.h`

For our implementation we are going to choose the event timer, because we want to change the application behavior when the timer expires every given period.

Create a new file in `/home/user/contiki/examples/z1` called `test_timer.c`.

We create a timer structure and set the timer to expire after a given number of seconds. When the timer expires we execute the code and restart the timer.

[source, perl]
----
#include "contiki.h"
#include "dev/leds.h"
#include "dev/button-sensor.h"
#include <stdio.h>
#define  SECONDS 2
/*-------------------------------------------------*/
PROCESS(hello_timer_process, "hello world with timer example");
AUTOSTART_PROCESSES(&hello_timer_process);
/*-------------------------------------------------*/
PROCESS_THREAD(hello_timer_process, ev, data)
{
  PROCESS_BEGIN();
  static struct etimer et;
  while(1) {
    etimer_set(&et, CLOCK_SECOND*SECONDS); <1>
    PROCESS_WAIT_EVENT(); <2>
    if(etimer_expired(&et)) {
      printf("Hello world!\n");
      etimer_reset(&et);
    }
  }
  PROCESS_END();
}
----
<1> *CLOCK_SECOND* is a value related to the number of the microcontroller's ticks per second. As Contiki runs on different platforms with different hardware, the value of CLOCK_SECOND also differs.
<2> PROCESS_WAIT_EVENT() waits for _any_ event to happen.

TIP: Exercise: can you print the value of CLOCK_SECOND to count how many ticks you have in one second? Try to blink the LED for a certain number of seconds. A new application that starts only when the button is pressed and when the button is pressed again it stops.


== Sensors

The Z1 mote has *two built in digital sensors*: temperature and 3-axis accelerometer, as well as support to interface out-of-the-box most analogue sensors.
The main difference between analog and digital sensors are the power consumption (lower in digital) and the protocol they use.

Analog sensors typically require  being connected to an ADC (analog to digital converters) to translate the analog (continuous) reading to an equivalent digital value in millivolts. The quality and resolution of the measure depends on both the ADC (resolution is 12 bits in the Z1) and on the sampling frequency.
As a rule of thumb, the sampling frequency must be twice that of the phenomenon you are measuring. As an example, if you want to sample human speech (8 kHz) you need to sample at twice that frequency (16 kHz minimum).

Digital sensors are normally interfaced over a digital communication protocol such as I2C, SPI, 1-Wire, Serial or depending on the manufacturer, a proprietary protocol normally on a ticking clock.

=== Analog Sensors
The Z1 mote has one built-in analog sensor to get the battery level expressed in milliVolts.

There is an example in the Contiki example folder called `test-battery.c`. The example includes the battery level driver (`battery-sensor.h`). It activates the sensor and prints as fast as possible (with no delay) the battery level.

When working with the ADC you need to convert the ADC integers in milliVolts. This is done with the following formula:

  float mv = (battery * 2.500 * 2) / 4096;

We multiply by the voltage reference and divide the raw value by 4096, as the precision of the ADC is 12 bits (1<<12).

The Z1 is powered at 3.3 V but it can be powered at 5 V through the USB.  There is an internal voltage divider that converts from 5 V to 3.3 V when using an analogue sensor in a specific _Phidget_ port, which are basically a connector with a given pin-out based on the commercially available _Phidget_ sensors.

image::./images/1/image04.png[]

More information about the Z1 mote pinout can be gleaned directly from its datasheet at:

http://zolertia.com/sites/default/files/Zolertia-Z1-Datasheet.pdf

=== External analog sensor:
We can connect an external analog sensor to any of the available_phidget_ ports.  As an example, let’s connect the Phidget 1142 *precision light sensor*.

image::./images/1/image05.png[]

It is important to know the voltage required by each sensor.  If the sensor can be powered at 3 V, it should be connected to the Phidgets_ connector in the top row.  If the sensor is powered at 5 V it can be safely connected to the _Phidgets bottom row.  You can use the 5V sensor only if the mote is powered by USB.
The Precision Light Sensor product information is available at:

http://www.phidgets.com/products.php?product_id=1142_0

There is an example called `test-phidgets.c`. This will read values from an analog sensor and print them to the terminal.

Connect the light sensor to the 3 V_Phidget_ connector.
As this is an official example, there is no need to add it to the Makefile (it is already there!).  Let’s compile the example code:

[source]
----
make clean && make test-phidgets.upload && make z1-reset && make login
----
This is the result:

[source, ruby]
----
Starting 'Test Button & Phidgets'
Please press the User Button
Phidget 5V 1:123
Phidget 5V 2:301
Phidget 3V 1:1710
Phidget 3V 2:2202
----
The light sensor is connected to the *Phidget 3V2 connector*, so the raw value is 2202. Try to illuminate the sensor with a flashlight (from your mobile phone, for example) and then cover it with your hand so that no light can reach it.

From the Phidget website we have the following information about the sensor:

[width="90%",frame="topbot",options="header,footer"]
|======================
|Parameter         | Value
|Sensor type       | Light
|Response time     | 2ms
|Light level min   | 1 lux
|Supply Voltage Min| 2.4 V
|Supply Voltage Max| 5.5 V
|Max current consumption| 5 mA
|Light level max (3.3 V) | 660 lux
|Light level max (5 V)   | 1000 lux
|======================

As you can see, the light sensor can be connected to either the 5 V or 3.3 V _Phidget_ connector. The max measurable value changes depending where you connect it.

The formula to translate SensorValue into luminosity is:
`Luminosity(lux)=SensorValue`

TIP: Exercise: make the sensor take sensor readings as fast as possible. Print on the screen the ADC raw values and the millivolts (as this sensor is linear, the voltage corresponds to the luxes). What are the max and min values you can get? What is the average light value of the room? Create an application that turns the red LED on when it is dark. When it is light, turn the green LED on. In between, switch off all the LEDs. Add a timer and measure the light every 10 seconds.

=== Internal digital sensor

As said earlier, the Z1 mote has a built-in ADXL345 3 axis accelerometer, and there is an example called `test-adxl345.c` available for testing.

The ADXL345 is an I2C ultra-low power sensor able to read up to 16g, well suited for mobile device applications.  It
measures the static acceleration of gravity in tilt-sensing applications, as well as dynamic acceleration resulting from motion or shock. Its high resolution (3.9mg/LSB) enables measurement of inclination changes less than 1.0°.

More information here:

http://www.analog.com/en/products/mems/mems-accelerometers/adxl345.html

[width="90%",frame="topbot",options="header,footer"]
|======================
|Parameter         | Value
|Sensor type       | Accelerometer
|Max data rate     | 3200 Hz
|Max resolution    | 13 bits
|Max current consumption| 140 uA
|======================

You don’t need to add it to the Makefile. Once uploaded, this is the result:

[source, ruby]
----
[37] DoubleTap detected! (0xE3) -- DoubleTap Tap
x: -1 y: 12 z: 223
[38] Tap detected! (0xC3) -- Tap
x: -2 y: 8 z: 220
x: 2 y: 4 z: 221
x: 3 y: 5 z: 221
x: 4 y: 5 z: 222
----

The accelerometer can give data in x, y and z axis and has three types of interrupts: a single tap, a double tap and a free-fall (pay attention not to damage the mote!).

The code has two threads, one for the interruptions and the other for the LEDs. When Contiki starts, it triggers both processes.

The led_process thread triggers a timer that waits before turning off the LEDs. This is mostly done to filter the rapid signal coming from the accelerometer. The other process is the acceleration. It assigns the callback for the led_off event.
Interrupts can happen at any given time, are non periodic and totally asynchronous.

Interrupts can be triggered by external sources (sensors, GPIOs, _Watchdog Timer_, etc) and should be cleared as soon as possible. When an interrupts happens, the interrupt handler (which is a process that checks the interrupt registers to find out which is the interrupt source) manages it and forwards it to the subscribed callback.

In this example, the accelerometer is initialized and then the interrupts are mapped to a specific callback functions. Interrupt source 1 is mapped to the free fall callback handler and the tap interrupts are mapped to the interrupt source 2.

[source]
----
/*
 * Start and setup the accelerometer with default
 * values, i.e no interrupts enabled.
 */
accm_init();
/* Register the callback functions */
ACCM_REGISTER_INT1_CB(accm_ff_cb);
ACCM_REGISTER_INT2_CB(accm_tap_cb);
----

We then need to enable the interrupts like this:
[source]
----
accm_set_irq(ADXL345_INT_FREEFALL,
             ADXL345_INT_TAP +
             ADXL345_INT_DOUBLETAP);
----
In the while cycle we read the values from each axis every second.  If there are no interrupts, this will be the only thing shown in the terminal.

TIP: Exercise: put the mote in different positions and check the values of the accelerometer. Try to understand what is x, y and z. Measure the maximum acceleration by shaking the mote. Turn on and off the LED according to the acceleration on one axis.

=== External digital sensor

image::./images/1/image06.png[]

The *ZIG-SHT25* is an I2C digital temperature and humidity sensor based on the SHT25 sensor from Sensirion.

Supply Voltage [V]: 2.1 - 3.6
Energy Consumption: 3.2 uW (at 8 bit, 1 measurement / s)
RH Operating Range: 0 - 100% RH
Temp. Operating Range: -40 - +125°C (-40 - +257°F)
RH Response Time: 8 sec (tau63%)

[width="90%",frame="topbot",options="header,footer"]
|======================
|Parameter              | Value
|Sensor type            | Temperature and Humidity
|Data range             | 0-100 %RH (humidity), -40-125ºC (temperature)
|Max resolution         | 14 bits (temperature), 12 bits (humidity)
|Max current consumption| 300 uA
|======================

More information available at:

http://webshop.zolertia.com/product_info.php/cPath/29_30/products_id/79

The advantage of using digital sensors is that you don’t have to do calibration of your own, as sensors normally come factory-calibrated.  Digital sensors often have a low power current consumption compared to their analog peers.

Digital sensors allow a more extended set of commands (turn on, turn off, configure interrupts).  With a digital light sensor for example, you could set a threshold value and let the sensor send an interrupt when reached, without the need for continuous polling.

The ZIG-SHT25 sensor example is available as `test-sht25.c`, an output example is given below:

[source, ruby]
----
Starting 'SHT25 test'
Temperature 23.71 ºC
Humidity 42.95 %RH
Temperature 23.71 ºC
Humidity 42.95 %RH
Temperature 23.71 ºC
Humidity 42.95 %RH
Temperature 23.71 ºC
Humidity 42.98 %RH
----
TIP: Exercise: convert the temperature to Fahrenheit. Try to get the temperature and humidity as high as possible (without damaging the mote!). Try to print only “possible” values (if you disconnect the sensor, you should not print anything, or print an error message!).

== Sending Data to Ubidots:

The objective of this practice is to introduce an IoT cloud platform and extend our Wireless Sensor Network to Internet, but before we cover the IP-based wireless communication, let's have some fun putting into practice the previously learned concepts and share our work.

=== What is Ubidots
Ubidots is a cloud service to capture and make sense of sensor data, enabling both makers and professionals to easily deploy its application and connect things to the Internet.

The Dashboard feature allows to visualize the gathered data in a _human_ way, enable to pre-process data (i.e convert from Celsius to Farenheit), as well as create events based on specific triggers, such as threshold limits, enabling notifications over email or SMS.

More information here:

http://www.ubidots.com

image::./images/1/image07.png[]

=== Get the API key and create your variables

The first step to start working is to register (don't worry is free!), click on `Sign Up`, and then at `My Profile` in the `API Keys tab` take note of your API Key or just create a `short Token`, which won't expire.

The next step is to create the Data Source, for this practice we will send Temperature readings from the built-in *TMP102 sensor*, so let's create a *Zolertia Z1 data source*.  Click on `Sources` then click on `Add data Source` and select a Generic device.  After naming and creating the source, let's add the temperature variable.

Click on the Data Source then click on `Add Variable`, after creating the variable click on the information button as shown below and take note of the Variable ID, it will be used to write and read data from the Variable.

image::./images/1/image08.png[]

=== Send data to Ubidots over the serial port

For this first example we need two software components: an application running on the Z1 mote sending data over the serial port, and a server-side application receiving, parsing and relaying the data to Ubidots.

We will create a simple Contiki application that handles the serial formatting to be sent to the server-side app (a python script with the Ubidots library).  Contiki Apps provide extra features that can be used directly by other applications. Apps are placed in the apps folder of Contiki.

The Makefile of a Contiki App has the following naming convention:

[source]
----
Makefile.serial-ubidots
----
And inside you must specify which are the source codes that will be used, in this case:

[source]
----
serial-ubidots_src = serial-ubidots.c
----
This is what the serial-ubidots serial will look like:

[source, perl]
----
#include "contiki.h"
#include <string.h>
#include "serial-ubidots.h"
void
send_to_ubidots(const char *api, const char *id, uint16_t *val)
{
  uint8_t i;
  unsigned char buf[6];
  printf("\r\n%s", api);
  printf("\t%s", id);
  for (i=0; i<UBIDOTS_MSG_16B_NUM; i++) {
    snprintf(buf, 6, "%04d", val[i]);
    printf("\t%s", buf);
  }
  printf("\r\n");
}
----

You need to declare a header file `serial-ubidots.h` as well:

[source, perl]
----
/*----------------------------------------------*/
#define UBIDOTS_MSG_APILEN 40
#define UBIDOTS_MSG_KEYLEN 24
#define UBIDOTS_MSG_16B_NUM 1
#define UBIDOTS_MSG_LEN (UBIDOTS_MSG_KEYLEN + UBIDOTS_MSG_APILEN + \
                        (UBIDOTS_MSG_16B_NUM*2) + 2)
/*----------------------------------------------*/
struct ubidots_msg_t {
  uint8_t id;
  uint8_t len;
  uint16_t value[UBIDOTS_MSG_16B_NUM];
#ifdef UBIDOTS_MSG_APILEN
  char api_key[UBIDOTS_MSG_APILEN];
#endif
#ifdef UBIDOTS_MSG_KEYLEN
  char var_key[UBIDOTS_MSG_KEYLEN];
#endif
};
/*----------------------------------------------*/
void send_to_ubidots(const char *api, const char *id, uint16_t *val);
/*----------------------------------------------*/
----

We have also created a data structure which will simplify sending this data over a wireless link, we will talk about this later.

Now that we have created this Contiki App, we should add it to our example code (that sends temperature to Ubidots), edit the `Makefile` at `examples/z1` and add serial-ubidots to the APPS argument:

[source]
----
APPS = serial-shell serial-ubidots
----

And now let’s edit the `test-tmp102.c` example to include the serial-ubidots application, first add the serial-ubidots header as follows:

[source]
----
#include "serial-ubidots.h"
----

Then we should create 2 new constants with the API key and Variable ID, obtained at Ubidots site as follows:

[source]
----
static const char api_key[] = "XXXX";
static const char var_key[] = "XXXX";
----

It is a general good practice to declare constants values as *const*, this will save some valuable bytes for the RAM memory.
Change the polling interval to avoid flooding Ubidots.

[source]
----
#define TMP102_READ_INTERVAL (CLOCK_SECOND * 15)
----

Then we are ready to send our data to Ubidots, first change the call to the tmp102 sensor to have the value with 2 digits precision, and send it over to Ubidots, replace as follows:
[source]
----
PRINTFDEBUG("Reading Temp...\n");
raw = tmp102_read_temp_x100();
send_to_ubidots(api_key, var_key, &raw);
----

Upload the code to the Z1:

[source]
----
make test-tmp102.upload && make z1-reset && make login
----

This is what you will see on the screen (mockup values):
[source, ruby]
----
 kjfdkjg455g4jh54g5jh4g5jh4g54jhg54jh55jj
 545jh45jh5jh456jh546jh45    2718
----

Notice that you must divide by 100 to get the 27.18 ºC degree value, this can be done easily on Ubidots.

=== Ubidots Python API Client

The Ubidots Python API Client makes calls to the Ubidots API.  The module is available on PyPI as _ubidots_.
To follow this quickstart you’ll need to have python 2.7 in your machine, available at http://www.python.org/download/.

You can install pip in Linux and Mac using this command:

[source, bash]
----
$ sudo easy_install pip
----

Ubidots for python is available in PyPI and you can install it from the command line:

[source, bash]
----
$ sudo pip install ubidots==1.6.1
----

Now let's create a Python script on the PC and name it `UbidotsPython.py`.  Below is a simple code snippet that gets the job done (no error checking, just a sample code!):

[source, python]
----
# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------------#
# Simple application to relay data to Ubidots from a Contiki serial-based conn
# ----------------------------------------------------------------------------#
import serial
from time import sleep
from ubidots import ApiClient

# Use as default
PORT = "/dev/ttyUSB0"

# ----------------------------------------------------------------------------#
# Create a serial object and connect to mote over USB
# ----------------------------------------------------------------------------#
def connectMote(port):
  try:
    ser = serial.Serial(port, 115200,timeout=0, parity=serial.PARITY_NONE,
                        stopbits=serial.STOPBITS_ONE, bytesize=serial.EIGHTBITS)
  except:
    sys.exit("Error connecting to the USB device, aborting")
  return ser

# ----------------------------------------------------------------------------#
# Parse the serial data and publish to Ubidots, this assumes the following:
# \r\n API_KEY \t VAR_KEY \t VALUE \r\n
# ----------------------------------------------------------------------------#
def process_data(raw):
  # Search for start and end of frame and slice, discard incomplete
  if "\r\n" in raw:
    raw = raw[(raw.index("\r\n") + 2):]
    if "\r\n" in raw:
      raw = raw[:raw.index("\r\n")]
      # We should have a full frame, parse based on tab and create a list
      ubidots_raw = raw.split("\t")
      # Create a Ubidots client and get a pointer to the variable
      client = ApiClient(ubidots_raw[0])
      try:
        my_variable = client.get_variable(ubidots_raw[1])
      except Exception, e:
        print "Ubidots error: %s" % e
        return
      # Update the variable
      my_variable.save_value({'value':int(ubidots_raw[2])})

# ----------------------------------------------------------------------------#
# MAIN APP
# ----------------------------------------------------------------------------#
if __name__=='__main__':

  # Create the serial object and connect to the mode
  # Do not check the serial port object as the function already does it
  s = connectMote(PORT)

  # Loop forever and wait for serial data
  while True:
    queue = s.inWaiting()
    if queue > 0:
      data = s.read(1000)
      process_data(data)
    sleep(0.2)
----

The data is sent to Ubidots as long as the python script is running. You can have it working in the background by adding `&` at the end of the script call.

While the python script is running, you cannot program the node as the resource is allocated, *close the Python script before doing so!*.

As the temperature sensor is located next to the USB connector, it tends to heat up. A realistic value is few degrees lower than the measured. To get more reliable temperature measurements while connected to the USB, use an external temperature sensor.

To divide the incoming raw data by 100, you should name it as derived variable as follows: create a derived Variable by dividing our current temperature variable by 100.

image::./images/1/image09.png[]