== Wireless with Contiki:

This section goes as follows:

* Set up the Node ID and MAC address of the Z1 mote.

* Simple application: UDP broadcast.

* Simple application: UDP Server and client.

* Check mote to mote communication.

* Check ETX, LQI, RSSI.

* Change the Radio Frequency Channel and PAN ID.

* Debug: use a Packet sniffer and Wireshark.

* RSSI scanner example application.

== Set up the Node ID and MAC address of the Z1 mote.

To start working you must first define the Node ID of each node, this will be used to generate the mote's MAC address and the IPv6 addresses (link-local and global).

You can program and store to flash your own.

.Note
****
Since commit `277dc8e1743cdcb253b13861044560464371e1c2` if you don't have stored a Node ID value in flash memory, upon programing the Z1 mote the Product Number (the one displayed earlier over the *make z1-motelist* command) is used instead.

Newer Z1 motes have this number already flashed in the flash memory from factory.
****

Let's use the ID from the motelist:

[source]
----
Reference  Device       	Description
--------------------------------------------------
Z1RC3301   /dev/ttyUSB0	Silicon Labs Zolertia Z1
----

The node ID should be 3301 (decimal) if not previously saved node ID is found in the flash memory.

Let’s see how Contiki uses this to derive a full IPv6 and MAC address.  At `platforms/z1/Contiki-z1-main.c`

[source, perl]
----
#ifdef SERIALNUM
  if(!node_id) {
    PRINTF("Node id is not set, using Z1 product ID\n");
    node_id = SERIALNUM;
  }
#endif
node_mac[0] = 0xc1; /* Hardcoded for Z1 */
node_mac[1] = 0x0c; /* Hardcoded for Revision C */
node_mac[2] = 0x00; /* Hardcoded to arbitrary even number so that the 802.15.4 MAC address is compatible with an Ethernet MAC address - byte 0 (byte 2 in the DS ID) */
node_mac[3] = 0x00; /* Hardcoded */
node_mac[4] = 0x00; /* Hardcoded */
node_mac[5] = 0x00; /* Hardcoded */
node_mac[6] = node_id >> 8;
node_mac[7] = node_id & 0xff;
}
----

So the  node’s addresses the mote should have will be :

[source, perl]
----
MAC c1:0c:00:00:00:00:0c:e5
Node id is set to 3301.
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:0ce5
----
Where c:e5 is the hex value corresponding to 3301.  The global address is only set when an IPv6 prefix is assigned (more about this later).

If you wish instead to have your own addressing scheme, you can edit the node_mac values at `Contiki-z1-main.c file`.  If you wish to assign a different node id value than the obtained from the product id, then you would need to store a new one in the flash memory, luckily there is already an application to do so:

Go to `examples/z1` location and replace the `158` for your own required value:

[source]
----
make clean && make burn-nodeid.upload nodeid=158 nodemac=158 && make z1-reset && make login
----
You should see the following:

[source, perl]
----
MAC c1:0c:00:00:00:00:0c:e5 Ref ID: 3301
Contiki-2.6-1803-g03f57ae started. Node id is set to 3301.
CSMA ContikiMAC, channel check rate 8 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:0ce5
Starting 'Burn node id'
Burning node id 158
Restored node id 158
----

As you can see, now the node ID has been changed to 158, when you restart the mote you should now see the changes are applied:

[source, perl]
----
MAC c1:0c:00:00:00:00:00:9e Ref ID: 3301
Contiki-2.6-1803-g03f57ae started. Node id is set to 158.
CSMA ContikiMAC, channel check rate 8 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:009e
----

== UDP Broadcast

In this example, we will show how nodes can send data over the air and get to know the basics of Contiki IPv6/RPL implementation.  This example contains a simple Contiki application that randomly broadcasts a UDP packet to its neighbors

We will use a simple version of UDP called simple-UDP.

image::./images/2/image14.jpg[]

UDP uses a simple connectionless transmission model with a minimum of protocol mechanism. It has no handshaking dialogues, and thus exposes any unreliability of the underlying network protocol to the user's program.

There is no guarantee of delivery, ordering, or duplicate protection. UDP is suitable for purposes where error checking and correction is either not necessary or is performed in the application, avoiding the overhead of such processing at the network interface level. Time-sensitive applications often use UDP because dropping packets is preferable to waiting for delayed packets, which may not be an option in a real-time system.

Wireless sensor networks often use UDP because it is lighter and there are less transactions (which can be translated in less energy consumption). A protocols using UDP is COAP (see later).

Go to:

[source]
----
cd examples/ipv6/simple-udp-rpl
----

And open the `broadcast-example.c` and the `Makefile`. Let’s see the contents of the `Makefile`:

[source, perl]
----
UIP_CONF_IPV6=1
CFLAGS+= -DUIP_CONF_IPV6_RPL
----

The above adds the IPv6 stack and RPL routing protocol to our application.

The `broadcast-example.c` contains:

[source]
----
#include "net/ip/uip.h"
----

This is the main IP library.

[source, perl]
----
/* Network interface and stateless autoconfiguration */
#include "net/ipv6/uip-ds6.h"
/* Use simple-udp library, at core/net/ip/ */
/* The simple-udp module provides a significantly simpler API. */
#include "simple-udp.h"
static struct simple_udp_connection broadcast_connection;
----

This structure allows to store the UDP connection information and mapped callback in which to process any received message.  It is initialized below in the following call:

[source]
----
simple_udp_register(&broadcast_connection, UDP_PORT, NULL, UDP_PORT, receiver);
----

This passes to the simple-udp application the ports from/to handle the broadcasts, and the callback function to handle received broadcasts.  We pass the NULL parameter as the destination address to allow packets from any address.

The receiver callback function is shown below:

[source]
----
receiver(struct simple_udp_connection *c,
       const uip_ipaddr_t *sender_addr,
       uint16_t sender_port,
       const uip_ipaddr_t *receiver_addr,
       uint16_t receiver_port,
       const uint8_t *data,
       uint16_t datalen);
----

This application first sets a timer and when the timer expires it sets a randomly generated new timer interval (between 1 and the sending interval) to avoid flooding the network. Then it sets the IP address to the link local all-nodes multicast address as follows:

[source]
----
uip_create_linklocal_allnodes_mcast(&addr);
----

And then use the `broadcast_connection` structure (with the values passed at register) and send our data over UDP.

[source]
----
simple_udp_sendto(&broadcast_connection, "Test", 4, &addr);
----

To extend the available address information, theres a library which already allows to print the IPv6 addresses in a friendlier way, add this to the top of the file:

[source, perl]
----
#include "debug.h"
#define DEBUG DEBUG_PRINT
#include "net/ip/uip-debug.h"
----

So we can now print the multicast address, add this before the `simple_udp_sendto(...)` call:

[source, perl]
----
PRINT6ADDR(&addr);
printf("\n");
----

Now let’s modify our receiver callback and print more information about the incoming message, replace the existing receiver code with the following:

[source, perl]
----
static void
receiver(struct simple_udp_connection *c,
       const uip_ipaddr_t *sender_addr,
       uint16_t sender_port,
       const uip_ipaddr_t *receiver_addr,
       uint16_t receiver_port,
       const uint8_t *data,
       uint16_t datalen)
{
  /* Modified to print extended information */
  printf("\nData received from: ");
  PRINT6ADDR(sender_addr);
  printf("\nAt port %d from port %d with length %d\n",
        receiver_port, sender_port, datalen);
  printf("Data Rx: %s\n", data);
}
----

Before uploading your code, override the default target by writing in the terminal:

[source]
----
make TARGET=z1 savetarget
----

Now clean any previous compiled code, compile, upload your code and then restart the z1 mote, and print the serial output to screen (all in one command!):

[source]
----
make clean && make broadcast-example.upload && make z1-reset && make login
----

TIP: Upload this code to at least 2 motes and send/receive messages from neighbors.  If you have more than 1 Z1 Mote connected in your PC, remember to use the MOTES=/dev/ttyUSBx argument in the upload, reset and login commands!

You will see the following result:

[source, perl]
----
Rime started with address 193.12.0.0.0.0.0.158
MAC c1:0c:00:00:00:00:00:9e Ref ID: 3301
Contiki-2.6-1803-g03f57ae started. Node id is set to 158.
CSMA ContikiMAC, channel check rate 8 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:009e
Starting 'UDP broadcast example process'
Sending broadcast to -> ff02::1

Data received from: fe80::c30c:0:0:309
At port 1234 from port 1234 with length 4
Data Rx: Test
Sending broadcast to -> ff02::1
----

TIP: Exercise:  replace the _Test_ string with your group’s name and try to identify others. Also write down the node ID of other motes. This will be useful for later.

To change the sending interval you can also modify the values at:

[source]
----
#define SEND_INTERVAL  (20 * CLOCK_SECOND)
#define SEND_TIME      (random_rand() % (SEND_INTERVAL))
----

== Setting up a sniffer
One of the must-have tools when developing wireless applications is a sniffer, which is basically a promiscuous wireless interface able to capture data and decode into a human-readable format.

A packet sniffer is a must-have tool for any wireless network application, a sniffer allows to actually see what are you transmitting over the air, verifying both the transmissions are taking place, the frames/packets are properly formatted, and the communication is being done on a given channel.

There are commercial options available, such as the Texas Instruments SmartRF packet Sniffer (http://www.ti.com/tool/packet-sniffer), which can be executed using a CC2531 USB dongle (http://www.ti.com/tool/CC2531EMK) and allows capturing outgoing packets like the one below.

image::./images/2/image00.png[]

For the remainder of this practice we will use Wireshark as our Packet analyzer, and we will learn about Open Source sniffers available.

=== Short intro to Wireshark

image::./images/2/image08.png[]

This example uses Wireshark to capture and examine a packet trace.  More information and installation instructions are available at:

https://www.wireshark.org/

A packet trace is a record of traffic at some location on the network, as if a snapshot was taken of all the bits that passed across a particular wire.  The packet trace records a timestamp for each packet, along with the bits that make up the packet, from the low-layer headers to the higher-layer contents.

Wireshark runs on most operating systems, including Windows, Mac and Linux. It provides a graphical UI that shows the sequence of packets and the meaning of the bits when interpreted as protocol headers and data. The packets are color-coded to convey their meaning, and Wireshark includes various ways to filter and analyze them to let you investigate different aspects of behavior. It is widely used to troubleshoot networks.

A common usage scenario is when a person wants to troubleshoot network problems or look at the internal workings of a network protocol. An user could, for example, see exactly what happens when he opens up a website or set up a wireless sensor network.  It is also possible to filter and search on given packet attributes, which facilitates the debugging process.

When you open Wireshark, there’s a couple of toolbars at the top, an area called Filter, and a few boxes below in the main window. Online directly links you to Wiresharks site, a handy user guide, and information on the security of Wireshark. Under Files, you’ll find Open, which lets you open previously saved captures, and Sample Captures. You can download any of the sample captures through this website, and study the data. This will help you understand what kind of packets Wireshark can capture.

Lastly is the Capture section. This will let you choose your Interface. You can see each of the interfaces that are available. It’ll also show you which ones are active. Clicking details will show you some pretty generic information about that interface.

Under Start, you can choose one or more interfaces to check out. Capture Options allows you to customize what information you see during a capture. Take a look at your Capture Options – under here you can choose a filter, a capture file, and more. Under Capture Help, you can read up on how to capture, and you can check info on Network Media about what interfaces work on what platforms.

Let’s select an interface and click Start. To stop a capture, press the red square in the top toolbar. If you want to start a new capture, hit the green triangle which looks like a shark fin next to it. Now that you have got a finished capture, you can click File, and save, open, or merge the capture. You can print it, you can quit the program, and you can export your packet capture in a variety of ways.

Under edit, you can find a certain packet, with the search options, you can copy packets, you can mark (highlight) any specific packet, or all the packets. Another interesting thing you can do under Edit, is resetting the time value. You’ll notice that the time is in seconds incrementing. You can reset it from the packet you’ve clicked on. You can add a comment to a packet, configure profiles and preferences.

A hands-on session using a Z1 mote as a sniffer will help using Wireshark.

=== SenSniff IEEE 802.15.4 wireless sniffer

We will use for this practive the *SenSniff* application, freely available at: https://github.com/g-oikonomou/sensniff

Paired with a Z1 mote and Wireshark (already installed in instant Contiki), this setup will allow us to understand how the wireless communication is done in Contiki.

To program the Z1 mote as a packet Sniffer go to the following location:

[source]
----
cd examples/z1/sniffer
----

In the `project-conf.h` select the channel to sniff, by changing the `RF_CHANNEL` and `CC2420_CONF_CHANNEL` definitions.  At the moment of writing this tutorial changing channels from the Sensniff application was not implemented but proposed as a feature, check the Sensniff’s `README.md` for changes and current status.

Compile and program:

[source]
----
make sniffer.upload
----

Do not open a login session because the sniffer application uses the serial port to send its findings to the sensniff python script.  Open a new terminal, and clone the sensniff project in your home folder:

[source, perl]
----
cd $HOME
git clone https://github.com/g-oikonomou/sensniff
cd sensniff/host
----

And launch the sensniff application with the following command:

[source, perl]
----
python sensniff.py --non-interactive -d /dev/ttyUSB0 -b 115200
----

Sensniff will read data from the mote over the serial port, dissect the frames and pipe to `/tmp/sensniff` by default, now we need to connect the other extreme of the pipe to wireshark, else you will get the following warning:

[source]
----
 "Remote end not reading"
----

Which is not severe, only means the other pipe endpoint is not connected.  You can also save the sniffed frames to open later with wireshark, adding the following argument to the above command `-p name.pcap`, which will save the session output in a `name.pcap` file.  Change the naming and location in where to store the file accordingly.

Open another terminal and launch wireshark with the following command, which will add the pipe as a capture interface:

[source]
----
sudo wireshark -i /tmp/sensniff
----

Select the `/tmp/sensniff` interface from the droplist and click `Start` just above.

image::./images/2/image06.png[]

Be sure the pipe is configured to capture packets in promiscuous mode, alternatively you can increase the buffer size, but 1Mb is sufficient enough.

image::./images/2/image07.png[]

And the captured frames should start to appear on screen.

image::./images/2/image03.png[]

You can add specific filters to limit the frames being shown on screen, for this example make click at the `Expression` button and a list of available attributes per protocol are listed, scroll down until the IEEE 802.15.4 and check the available filters.  You can also chain different filter arguments using the `Filter` box, in this case we only wanted to check the frames belonging to the `PAN 0xABCD` and coming from node `c1:0c::0309`, so we used the `wpan.dst_pan` and  `wpan.src64` attributes.

image::./images/2/image13.png[]

TIP:  For correct Wireshark decoding using a sniffer, add the /64 prefix to the 6LowPAN protocol preferences,
      e.g. set Context 0 to aaaa::.

When closing the Sensniff python application, a session information is provided reporting the statistics:

[source, perl]
----
Frame Stats:
         Non-Frame: 6
         Not Piped: 377
    Dumped to PCAP: 8086
             Piped: 7709
          Captured: 8086
----

TIP: Excercise: sniff the traffic! try to filter outgoing and incoming data packets using your own custom rules.

=== Foren6

Another must-to-have tool for analyzing and debugging 6loWPAN/IPv6 networks is Foren6 http://cetic.github.io/foren6/, It uses a passive sniffer devices to reconstruct a visual and textual representation of network information, with a friendly graphical user interface and customizable layout, and allows amongst others to rewind the packet capture history and replay a previous packet trace.

image::./images/2/image01.png[]

To install follow the instructions at http://cetic.github.io/foren6/install.html

Then to program a Z1 mote as sniffer:

[source, perl]
----
git clone https://github.com/cetic/Contiki
cd Contiki
git checkout sniffer
cd examples/sniffer
make TARGET=z1.upload
----

Then to connect to Foren6, a basic step-by-step guide available for the Z1 mote is available at the link below:

http://cetic.github.io/foren6/example2.html

Open the `Manage Sources` dialog by clicking the Manage Sources button in the Toolbar or from the `File` menu, then click `Start` and visualize your network.

image::./images/2/image11.png[]

== Simple application: UDP Server and client

Normal UDP or TCP transactions require a server-client model, in which the communication is made in sockets, which is an IP address and a port number. What we will do in this example is to forward to the receiver connected to a PC (via USB) temperature sensor data to be published to Ubidots.

TIP: You will need two nodes. The one sending the temperature data is the server, while the one connected to the PC via USB is the client.

This example relies on a service ID, which allows registering, disseminating, and looking up services. A service is identified by an 8-bit integer between 1 and 255. Integers below 128 are reserved for system services. When setting up the example, we need to decide a service ID for the temperature data. The advantage is that the servers (sending data) don’t need to know the address of the receiver. It is a subscription model where we only need to agree on the service number ID.

We have three groups:

* Group 1 hosts the client that received the data from Groups 2 and 3.

* Group 2 and 3 are the servers that transmit data.  Group 2 sends temperature data and has service ID number 190. Group 3 sends acceleration data and has service ID number 191.

*Server side*:

Open `examples/ipv6/simple-udp-rpl/unicast-sender.c`

At first we are going to add

[source, perl]
----
#include "serial-ubidots.h"
#include "dev/i2cmaster.h"
----

*Group 2*:
[source, perl]
----
#include "dev/tmp102.h"
#define SERVICE_ID 190
#define UDP_PORT 1234
----

*Group 3*:
[source, perl]
----
#include "dev/adxl345.h"
#define SERVICE_ID 190
#define UDP_PORT 5678
----

Change the poll rate to something faster:
[source, perl]
----
#define SEND_INTERVAL  (15 * CLOCK_SECOND)
----

We have declared a structure at `apps/serial-ubidots.h` to store the Variable ID and data to be pushed to Ubidots, this will be helpful when sending data wirelessly to the receiver.  This is already declared at `serial-ubidots.h`, do not add this to the example.

[source, perl]
----
struct ubidots_msg_t {
  uint8_t id;
  uint8_t len;
  uint16_t value[UBIDOTS_MSG_16B_NUM];
#ifdef UBIDOTS_MSG_APILEN
  char api_key[UBIDOTS_MSG_APILEN];
#endif
#ifdef UBIDOTS_MSG_KEYLEN
  char var_key[UBIDOTS_MSG_KEYLEN];
#endif
};
----

Declare a structure in our code and a pointer to this structure as below:
[source, perl]
----
static struct ubidots_msg_t msg;
static struct ubidots_msg_t *msgPtr = &msg;
----

These structures are used to send Ubidots specific information.

In this application we are going to use global IPv6 addresses besides the link-local ones, the function set_global_address initializes our IPv6 address with the prefix aaaa::, and generates also the link local addressing based on the MAC address.

[source, perl]
----
static void
set_global_address(void)
{
  uip_ipaddr_t ipaddr;
  int i;
  uint8_t state;
  /* Initialize the IPv6 address as below */
  uip_ip6addr(&ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);
  /* Set the last 64 bits of an IP address based on the MAC address */
  uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr);
  /* Add to our list addresses */
  uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);
  printf("IPv6 addresses: ");
  for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
    state = uip_ds6_if.addr_list[i].state;
    if(uip_ds6_if.addr_list[i].isused &&
      (state == ADDR_TENTATIVE || state == ADDR_PREFERRED)) {
      uip_debug_ipaddr_print(&uip_ds6_if.addr_list[i].ipaddr);
      printf("\n");
    }
  }
}
----

Now inside the `PROCESS_THREAD(unicast_sender_process, ev, data)`, right after the `set_global_address()` call, we initialize our sensors:

*Group 2:*
[source]
----
int16_t temp;
tmp102_init();
----

*Group 3:*
[source]
----
accm_init();
----

And we pass our variable ID obtained at Ubidots to the ubidots message structure as follows:

[source]
----
memcpy(msg.var_key, "XXXX UBIDOTS_MSG_KEYLEN);
memcpy(msg.api_key, "XXXX", UBIDOTS_MSG_KEYLEN);
printf("KEY %s VAR %s\n", msg.api_key, msg.var_key);
----

This function returns the address of the node offering a specific service. If the service is not known, the function returns _NULL_. If there are more than one nodes offering the service, this function returns the address of the node that most recently announced its service.

[source]
----
addr = servreg_hack_lookup(SERVICE_ID);
----

If we have the receiver node in our services list, then we take a measure from the sensor, pack it into the byte buffer, and send the information to the receiver node by passing the structure as an array using the pointer to the structure, specifying the size in bytes.

The `UBIDOTS_MSG_LEN` is the sum of the packet, one could also use *sizeof*.

Replace the existing `if (addr != NULL)` block with the following:

*Group 2:*
[source, perl]
----
if (addr != NULL) {
    temp = tmp102_read_temp_x100();
    memcpy(&msg.value[0], &temp, 2);
    printf("Sending temperature reading -> %d via unicast to ", temp);
    uip_debug_ipaddr_print(addr);
    printf("\n");
    simple_udp_sendto(&unicast_connection, msgPtr, UBIDOTS_MSG_LEN, addr);
} else {
    printf("Service %d not found\n", SERVICE_ID);
}
----

*Group 3:*

Replace inside the `if (addr != NULL)` conditional with the following:
[source, perl]
----
uint8_t x_axis;
x_axis = accm_read_axis(X_AXIS);
memcpy(&msg.value[0], &x_axis, 1);
printf("Sending temperature reading -> %d via unicast to ", temp);
uip_debug_ipaddr_print(addr);
printf("\n");
simple_udp_sendto(&unicast_connection, msgPtr, UBIDOTS_MSG_LEN, addr);
----

And finally add the serial-ubidots app to our `Makefile`:

[source]
----
APPS = servreg-hack serial-ubidots
----

If the address is NULL it can means the receiver node is not present yet.

[source, perl]
----
connecting to /dev/ttyUSB0 (115200) [OK]
Rime started with address 193.12.0.0.0.0.3.9
MAC c1:0c:00:00:00:00:03:09 Ref ID: 255
Contiki-2.6-1796-ga50bc08 started. Node id is set to 377.
CSMA ContikiMAC, channel check rate 8 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:0309
Starting 'Unicast sender example process'
IPv6 addresses: aaaa::c30c:0:0:309
fe80::c30c:0:0:309
VAR 545a202b76254223b5ffa65f
Service 190 not found
----

*Client side:*

Open `examples/ipv6/simple-udp-rpl/unicast-receiver.c` and add the Ubidots app:

[source]
----
#include "serial-ubidots.h"
----

Add the services we are interested in, each one to be received in a different UDP port:

[source]
----
#define SERVICE_ID 190
#define UDP_PORT_TEMP  1234
#define UDP_PORT_ACCEL 5678
----

You can delete the  `SERVICE_ID`, `SEND_INTERVAL` and `SEND_TIME` definitions.

.A quick RPL intro
****
RPL is on the IETF standards track for routing in low-power and lossy networks. The protocol is tree-oriented in the sense that one or more root nodes in a network may generate a topology that trickles downward to leaf nodes.

In each RPL instance, multiple Directed Acyclic Graphs (DAGs) may exist, each having a different DAG root. A node may join multiple RPL instances, but must only belong to one DAG within each instance.
****

The receiver creates the RPL DAG and becomes the network root with the same prefix as the servers:

[source, perl]
----
static void
create_rpl_dag(uip_ipaddr_t *ipaddr)
{
  struct uip_ds6_addr *root_if;

  root_if = uip_ds6_addr_lookup(ipaddr);
  if(root_if != NULL) {
  rpl_dag_t *dag;
  uip_ipaddr_t prefix;

  rpl_set_root(RPL_DEFAULT_INSTANCE, ipaddr);
  dag = rpl_get_any_dag();
  uip_ip6addr(&prefix, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);
  rpl_set_prefix(dag, &prefix, 64);
  PRINTF("created a new RPL dag\n");
  } else {
  PRINTF("failed to create a new RPL DAG\n");
  }
}
----

We now should subscribe to both services (temperature and acceleration), let’s replace the `simple_udp_register` call inside the `PROCESS_THREAD` block, after the `servreg_hack_register(...)`  call with the following:

[source, perl]
----
simple_udp_register(&unicast_connection, UDP_PORT_TEMP,
                    NULL, UDP_PORT_TEMP, receiver);
simple_udp_register(&unicast_connection, UDP_PORT_ACCEL,
                    NULL, UDP_PORT_ACCEL, receiver);
----

And at the receiver callback, replace with the following:

[source, perl]
----
static void
receiver(struct simple_udp_connection *c,
       const uip_ipaddr_t *sender_addr,
       uint16_t sender_port,
       const uip_ipaddr_t *receiver_addr,
       uint16_t receiver_port,
       const uint8_t *data,
       uint16_t datalen)
{
  struct ubidots_msg_t msg;
  struct ubidots_msg_t *msgPtr = data;
  leds_toggle(LEDS_GREEN);
  printf("Data received from ");
  uip_debug_ipaddr_print(sender_addr);
  printf(" on port %d from port %d\n",
       receiver_port, sender_port);
  if ((receiver_port == UDP_PORT_TEMP) || (receiver_port == UDP_PORT_ACCEL)){
    /* Copy the data and send to ubidots */
    printf("API -> %s VAR -> %s : %d\n", msgPtr->api_key, msgPtr->var_key, msgPtr->value[0]);
    send_to_ubidots(msgPtr->api_key, msgPtr->var_key, msgPtr->value);
  }
}
----

Once the sender and the receivers have started, the following messages are shown on the screen of the receiver:

[source, perl]
----
Starting 'Unicast receiver example process'
IPv6 addresses: aaaa::c30c:0:0:2
fe80::c30c:0:0:2
Data received from aaaa::c30c:0:0:309 on port 1234 from port 1234
Variable -> 545a202b76254223b5ffa65f : 2712

fd6c3eb63433221e0a6840633edb21f9ec398d6a    545b43f776254256ebbef0a6   2712
----

=== IEEE 802.15.4 channels and PAN ID

The IEEE 802.15.4 standard is intended to conform to established radio frequency regulations and defines specific physical (PHY) layers according to country regulations, for example the 2.4-GHz and 868/915-MHz band PHY layers.

The Z1 motes operate on the unlicensed and worldwide available 2.4GHz band, The transmit scheme used is _Direct Sequence Spread Spectrum_ (DSSS) modulation technique, up to 250Kbps data rate, allowing a wireless range of 50-100 mts.

A total of 16 channels are available in the 2.4-GHz band, numbered 11 to 26, each with a bandwidth of 2 MHz and a channel separation of 5 MHz.  As other protocols also share this band, such as WiFi IEEE 802.11 and Bluetooth IEEE 802.15, we should be aware of using channels that are not interfered by other devices.

image::./images/2/image04.png[]

As shown above the channels 15, 20, 25 and 26 are not overlapping WiFi used channels, so typically most IEEE 802.15.4 based devices tend to operate on this frequencies.  One handy tool to have is a spectrum analyser to scope the wireless medium, which shows the wireless activity on a given band.

A spectrum analyzer will show you the received power at a certain frequency, so you will not know if the power comes from another node, a WiFi device or even a microwave oven!  We can use the Z1 mote as a simple spectrum analyser, which sweeps across the list of supported channels and shows its radiated power.

To install the spectrum analyser application to the Z1 mote go to the following directory:

[source]
----
cd examples/rssi_scanner
----

And compile, upload and execute the Java application to visualize the radiated power across channels:

[source]
----
make TARGET=z1 savetarget
make rssi-scanner-cc2420.upload && make viewrssi
----

The result is shown below.

image::./images/2/image02.png[]

You can change the default 26 radio channel in Contiki by changing or redefining the following defines: `RF_CHANNEL`

But, where are this constants declared? Let’s use a handy command line utility that allows to search for files and content within files, most useful when you need to find a declaration, definition, a file in which an error/warning message is printed, etc.  To find where this definition is used by the Z1 platform use this command:

[source]
----
cd platform/z1
grep -lr "RF_CHANNEL" .
----

Which gives the following result:

[source]
----
./Contiki-conf.h
----

Basically grep as used above uses the following arguments: `-lr` instructs the utility to search recursively through the directories for the required content between the quotes, from our current location (noted by the dot at the end of the command) transversing the directories structure.

The `platform/z1/Contiki-conf.h` shows the following information regarding the `RF_CHANNEL`

[source, perl]
----
#ifdef RF_CHANNEL
#define CC2420_CONF_CHANNEL RF_CHANNEL
#endif

#ifndef CC2420_CONF_CHANNEL
#define CC2420_CONF_CHANNEL          	26
#endif /* CC2420_CONF_CHANNEL */
----

So we could either change the channel value directly to this file, but this change would affect other applications that perhaps need to operate on a given channel, so we could just override the `RF_CHANNEL` instead by adding the following to our applications `Makefile`:

[source]
----
CFLAGS += -DRF_CHANNEL=26
----

Or at compilation time adding the following argument:

[source]
----
DEFINES=RF_CHANNEL=26
----

The `PAN ID` is an unique Personal Area Network identifier that namely distinguish our network from others in the same channel, thus allowing to subdivide a given channel into sub-networks, each having its own network traffic.  By default in Contiki and for the Z1 mote the `PAN ID` is defined as`0xABCD`.

TIP: Exercise: Search where the PAN_ID is declared (hint: it has the 0xABCD value) and change to something different, then use the Z1 Sniffer and Wireshark to check if the changes were applied.  Keep in mind that for 2 devices to talk to each other, the must have the same PAN ID.  You can also program the Z1 Sniffer and your test application on a channel other than 26.


=== ETX, LQI, RSSI.

Link Estimation is an integral part of reliable communication in wireless networks. Various link estimation metrics have been proposed to effectively measure the quality of wireless links.

image::./images/2/image05.png[]

The ETX metric, or expected transmission count, is a measure of the quality of a path between two nodes in a wireless packet data network. ETX is the number of expected transmissions of a packet necessary for it to be received without error at its destination. This number varies from one to infinity. An ETX of one indicates a perfect transmission medium, where an ETX of infinity represents a completely non-functional link. Note that ETX is an expected transmission count for a future event, as opposed to an actual count of a past event. It is hence a real number, and not an integer.

ETX can be used as the routing metric. Routes with a lower metric are preferred. In a route that includes multiple hops, the metric is the sum of the ETX of the individual hops.

image::./images/2/image12.png[]

LQI (Link Quality Indicator) is a digital value often provide by Chipset vendors, which is an indicator of how well a signal is demodulated, or the strength and quality of the received packet, thus indicating a good or bad wireless medium.  The CC2420 radio frequency transceiver used by the Z1 mote typically ranges from 110 (indicates a maximum quality frame) to 50 (typically the lowest quality frames detectable by the transceiver).

The example above shows how the Packet Reception Rate decreases as the CC2420 LQI decreases.

image::./images/2/image10.png[]

RSSI is a generic radio receiver technology metric, used internally in a wireless networking device to determine when the amount of radio energy in the channel is below a certain threshold at which point the medium is clear to transmit.  The end-user will likely observe a RSSI value when measuring the signal strength of a wireless network through the use of a wireless network monitoring tool like Wireshark, Kismet or Inssider.

There is no standardized relationship of any particular physical parameter to the RSSI reading, Vendors and chipset makers provide their own accuracy, granularity, and range for the actual power (measured as mW or dBm) and their range of RSSI values (from 0 to RSSI_Max), in the case of the CC2420 radio frequency transceiver on the Z1 mote, the RSSI can range from 0 to -100dBm, values close to 0 are related to good links and values close to -100 are closely related to a bad link, due to multiple factors such as distance, environmental, obstacles, interferences, etc.

The image above shows how the Packet Reception Rate (PRR) dramatically decreases as the CC2420 RSSI values are worse.

To print the current channel, RSSI and LQI of the last received packet (thus the link attributes of the link between the node and the sender), we are going to revisit the `unicast-receiver.c` example, open the file and let’s include the following:

[source]
----
#include "dev/cc2420/cc2420.h"
----

And add the following print statement in the receiver block.  The external variables `cc2420_last_rssi` and `cc2420_last_correlation` (LQI) are updated on a new incoming packet, so it should match our received packet.

[source]
----
printf("CH: &u RSSI: %d LQI %u\n", cc2420_get_channel(), cc2420_last_rssi, cc2420_last_correlation);
----

We should see something like the following:

[source, perl]
----
Data received from aaaa::c30c:0:0:309 on port 1234 from port 1234
CH: 26 RSSI: -27 LQI 105
Variable -> 545b43f776254256ebbef0a6 : 2650
----

TIP: Exercise: Z1 motes comes in two models: one with an integrated antenna and another with an external antenna. The integrated antenna is a ceramic antenna from Yageo/Phycomp, connected to the CC2420. The external antenna can be connected via a u.FL connector.
Try to move away from the receiver and check the received signal on your laptop. What is the max distance? What is the nominal value for 50m with line of sight? Build an application that blinks a green LED when the RSSI is above -55 and a red LED when the RSSI is lower than -55. Does changing the node height and orientation change the RSSI value? If you have one, test the RSSI with an external directional antenna.

== Intro to 6LoWPAN

6LoWPAN is a protocol definition to enable IPv6 packets to be carried on top of low power wireless networks. The concept was born from the idea that the Internet Protocol could and should be applied to even the smallest devices. The initial goal was to define an adaptation layer to deal with the requirements imposed by IPv6, such as the increased address sizes and the 1280 byte MTU. The final design takes the concepts used in IPv6 to create a set of headers that allow for the efficient encoding of large IPv6 addresses/headers into a smaller compressed header, while at the same time allowing for the use of various mesh networks and supporting fragmentation and reassembly where needed. The target for IP networking for low-power radio communication are applications that need wireless internet connectivity at lower data rates for devices with very limited form factor. Examples include, but are not limited to: automation and entertainment applications in home, office and factory environments. IPv6 is also in use on the smart grid enabling smart meters and other devices to build a micro mesh network before sending the data back to the billing system using the IPv6 backbone.

The 'Lo' part of 6LoWPAN stands for low-power. The chips used for 6LoWPAN are based on IEEE 802.15.4 radios. These chips require less power so they can run longer on batteries but still have a decent range, although that depends on their frequency. They run at 868 MHz, 900 MHz and 2.4 GHz, depending on the region.

The 'WPAN' is for Wireless Personal Area Network. So this means you can have a network anywhere connected together that consists of sensors or other devices.

The '6' part of 6LoWPAN means that, theoretically, anyone on the Internet can talk to any one of these small 6LoWPAN devices directly because routing would be taken care of through the globe and then to some 'edge router' which would take Ethernet or wifi or whatever else and move it from there to 802.15.4 radio to those small low-power devices.

Some more detailed information about 6LoWPAN is provided below:

Adapting the packet sizes of the two networks. IPv6 requires the maximum transmission unit (MTU) to be at least 1280 Bytes. In contrast, IEEE 802.15.4's standard packet size is 127 octets. A maximum frame overhead of 25 octets spares 102 octets at the media access control layer. An optional but highly recommended security feature at the link layer poses an additional overhead. For example, 21 octets are consumed for AES-CCM-128 leaving only 81 octets for upper layers.

Address resolution
IPv6 nodes are assigned 128 bit IP addresses in a hierarchical manner, through an arbitrary length network prefix. IEEE 802.15.4 devices may use either of IEEE 64 bit extended addresses or, after an association event, 16 bit addresses that are unique within a PAN. There is also a PAN-ID for a group of physically collocated IEEE 802.15.4 devices.

Device and service discovery
Since IP-enabled devices may require the formation of ad hoc networks, the current state of neighboring devices and the services hosted by such devices will need to be known. IPv6 neighbour discovery extensions is an internet draft proposed as a contribution in this area.

Security
IEEE 802.15.4 nodes can operate in either secure mode or non-secure mode. Two security modes are defined in the specification in order to achieve different security objectives: Access Control List (ACL) and Secure mode.
