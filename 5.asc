== End-to-end IPv6 communication with an IoT platform

In this section we will go a step further and publish data to a real-live IoT
platform from our IPv6-based network to Ubidots IPv6 endpoint, although using NAT64
would allow us to send data to an IPv4-based platform as well, so we may extend
this example to others platforms such as *The Things.IO*, *Sentilo*, etc, even if
both endpoints are running on IPv4.

This section goes as follow:

* Installing 6lbr on a Raspberri Pi.

* Programing the slip-radio to the Z1 mote.

* Using NAT64 with wrapsix.

* Launching 6lbr as Border Router with NAT64.

* Ubidots IPv6 example in native Contiki.

=== Installing 6lbr on a Raspberri Pi

For this practice we will use a *Raspberry Pi 2* as a Gateway, running *6lbr* as our
Border Router.

image::./images/5/image02.png[]

*6lbr* is a deployable-ready Border Router solution based on Contiki, with
features like providing a friendly webserver interface to manage the network, statistics
and administrative options, also provides the following operation modes:

* Router: Real routing between IPv6 and 6LoWPAN, treated as independant subnetworks. A grounded in 6LBR or standalone RPL root handles the WSN network.
* SmartBridge: Bridged deployment between the 802.15.4 and ethernet interfaces while keeping a RPL root.
* TransparentBridge: 802.15.4 interface fully-bridged with the ethernet interface.

You can use the WiFI interface as well as the Ethernet interface.

More information at:

http://cetic.github.io/6lbr/

The following steps assume an already running Raspberry Pi system based on *Raspbian* or similar,
to download and install a Raspbian image follow the instructions available at http://www.raspbian.org/

image::./images/5/image00.png[]

To install on the Raspberry Pi (at the present date) there are detailed instructions at:

https://github.com/cetic/6lbr/wiki/RaspberryPi-Software-Configuration

A brief set of instructions is given below:

Insert the Raspberry Pi microSD card in your laptop/PC and in the *boot partition*,
open the /boot/cmdline.txt file and add the following configuration parameter :

`dwc_otg.speed=1`

Insert the microSD in the Raspberry Pi and power up, remember if you are using a
Vanilla Raspbian Distribuion, the username and password should be:

[source, perl]
----
user: pi
password: raspberry
----

Then install some dependencies:

[source, perl]
----
sudo apt-get install libncurses5-dev
sudo apt-get install bridge-utils nano
----

To install 6lbr download the following release:

[source, perl]
----
wget https://raw.github.com/wiki/cetic/6lbr/releases/cetic-6lbr_1.3.2_armhf.deb
dpkg -i cetic-6lbr_1.3.2_armhf.deb
----

Now 6lbr should be living in `/etc/6lbr` and the log is kept in `/var/log/6lbr.log`,
let's now create a `6lbr.conf` file as it follows:

[source, perl]
----
sudo touch /etc/6lbr/6lbr.conf
sudo nano /etc/6lbr/6lbr.conf
----

And paste the following content:

[source, perl]
----
MODE=ROUTER
RAW_ETH=1
BRIDGE=0
DEV_BRIDGE=br0
DEV_TAP=tap0
DEV_ETH=eth0
RAW_ETH_FCS=0
DEV_RADIO=/dev/ttyUSB0
BAUDRATE=115200
LOG_LEVEL=3 #INFO and above only
----

This assumes a Z1 mote to be connected to the Raspberry Pi over USB will be
assigned at port `/dev/ttyUSB0` running at 115200 bps, if this changes you can edit the configuration
file and restart 6lbr by doing:

[source, perl]
----
sudo service 6lbr restart
----

In Router mode as `MODE=ROUTER`, the 6LBR acts as a full fledged IPv6 Router, interconnecting two IPv6 subnets.
The WSN subnet is managed by the RPL protocol and the Ethernet subnet is managed by IPv6 NDP.

We are to use the Ethernet-side interface with an existing Ethernet interface, as `RAW_ETH=1` is chosen,
otherwise a new virutal tap interface is to be created.

image::./images/5/image01.png[]

By default 6lbr should be launched automatically at each boot,
but as convenient as it is, let's disable this option and launch
6lbr ourselves in the following section.

[source]
----
update-rc.d -f 6lbr remove
----

=== Programing the slip-radio to the Z1 mote

6lbr depends on having *a Z1 mote as a IEEE 802.15.4 bare wireless interface*, running a
slip-radio application which allows 6lbr to drive the radio on its own.  To compile and flash
the slip-radio follow the next steps in your host:

[source, perl]
----
cd examples/ipv6/slip-radio
make TARGET=z1 savetarget
make slip-radio.upload
----

Then disconnect the slip-radio Z1 mote, connect to the Raspberry Pi over USB,
and let's do a sanity check first and run this command in the Raspberry Pi after connecting the mote:

[source, perl]
----
dmesg | grep ttyUSB
[ 2951.297568] usb 3-1.2: cp210x converter now attached to ttyUSB0
----

The Z1 mote is connected to the `/dev/ttyUSB0` port, no need to
modify the `6lbr.conf` file.

=== Using NAT64 with wrapsix.

NAT64 is an IPv6 transition mechanism that enables communication between IPv6 and IPv4 hosts by using a form of network address translation (NAT).

*Wrapsix* is an IPv4-to-IPv6 translator, and as an intermediary it has at least one IPv4 address and an IPv6 network segment comprising a 32-bit address space.

More information at:

http://www.wrapsix.org/

To install in the Raspberry Pi just download the following release:

[source, perl]
----
wget http://www.wrapsix.org/download/wrapsix-0.2.0.tar.bz2
tar jxf wrapsix-0.2.0.tar.bz2
cd wrapsix-0.2.0/src
----

Now before compiling a tweak: NAT64 requires one IPv4 and IPv6 address, so
edit the `wrapper.c` and `wrapper.h` files and edit the following:

[source, perl]
----
#define INTERFACE       "eth0"
#define PREFIX          "64:ff9b::"
#define IPV4_ADDR       "192.168.1.111"
#define HOST_IPV6_ADDR  "bbbb::101"
#define HOST_IPV4_ADDR  "192.168.1.17"
----

Where:

* `IPV4_ADDR` should be an *unused IPv4 address*
* `HOST_IPV6_ADDR` should be an *unused IPv6 address*, as default 6lbr assigns the Ethernet side a `bbbb::100` address, we can take the next one.
* `HOST_IPV4_ADDR` should be the *host IPv4 address*, check what is yours with `ifconfig`.

Now let's compile and install:

[source, perl]
----
cd ..
./configure && make && sudo make install
----

By default *wrapsix* is not launched at boot, so we need to start the service ourselves, we will do
in the next section.

=== Launching 6lbr as Border Router with NAT64

Our Border Router setup should be something as below:

image::./images/5/image03.jpg[]

Now start *wrapsix* and daemonize to the background:

[source, perl]
----
wrapsix &
----

Then let's launch *6lbr*:

[source, perl]
----
sudo service 6lbr restart
----

We can see if there's any error while loading 6lbr by checking the log (ommited non-relevant info):

[source, perl]
----
cat /var/log/6lbr.conf

Contiki-6lbr-1.3.2 started with IPV6, RPL
Rime started with address 1.2.3.4.5.6.7.8
MAC CSMA RDC br-rdc NETWORK sicslowpan
Log level : 30
Log services : ffffffff
2015-02-13 15:17:15.482699: INFO: ETH: 6LBR watchdog started (interval: 60)
2015-02-13 15:17:15.484257: INFO: 6LBR: Starting 6LBR version 1.3.2 (Contiki-6lbr-1.3.2)
2015-02-13 15:17:15.484311: INFO: NVM: Opening nvm file '/etc/6lbr/nvm.dat'
2015-02-13 15:17:15.490684: INFO: ETH: RAW/TAP init
2015-02-13 15:17:15.492436: INFO: SLIP: SLIP started on /dev/ttyUSB1
2015-02-13 15:17:15.520722: INFO: TAP: opened device /dev/eth0
2015-02-13 15:17:15.521311: INFO: TAP: Running 6lbr-ifup script '/usr/lib/6lbr/6lbr-ifup'
eth0      Link encap:Ethernet  HWaddr b8:27:eb:33:60:44
          inet addr:192.168.1.17  Bcast:192.168.1.255  Mask:255.255.255.0
          inet6 addr: fe80::ba27:ebff:fe33:6044/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:2 errors:0 dropped:0 overruns:0 frame:0
          TX packets:7 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:282 (282.0 B)  TX bytes:874 (874.0 B)

2015-02-13 15:17:16.70733: INFO: TAP: Eth MAC address : b8:27:eb:33:60:44
2015-02-13 15:17:16.135720: INFO: BR-RDC: Got MAC: 00:12:4b:00:04:30:4e:95
2015-02-13 15:17:17.71829: INFO: 6LBR: Tentative local IPv6 address fe80::212:4b00:430:4e95
2015-02-13 15:17:17.72447: INFO: 6LBR: Tentative global IPv6 address (WSN) aaaa::212:4b00:430:4e95
2015-02-13 15:17:17.73057: INFO: 6LBR: Tentative global IPv6 address (ETH) bbbb::100
2015-02-13 15:17:17.73374: INFO: 6LBR: RA Daemon enabled
2015-02-13 15:17:17.74314: INFO: NVM: Opening nvm file '/etc/6lbr/nvm.dat'
2015-02-13 15:17:17.79021: INFO: 6LBR: Configured as DODAG Root
2015-02-13 15:17:17.79316: INFO: 6LBR: Starting as RPL ROUTER
2015-02-13 15:17:17.90722: INFO: UDPS: UDP server started
2015-02-13 15:17:17.95777: INFO: 6LBR: CETIC 6LBR Started
----

In my current setup I'm using the `cccc::100` instead of the `bbbb::100` address, ignore this and assume `bbbb::100`.

Browse the 6lbr webserver by pasting the following URL in your browser:

[source, perl]
----
http://[bbbb::100]
----

The 6lbr Info page will be displayed showing the current Border Router configuration.

image::./images/5/image04.png[]

TIP: Check the IPv4 connectivity by `ping www.google.com`, check if the ethernet interface is properly configured by running `ifconfig`.  Finally you can check if 6lbr and wrapsix are running by running `ps aux | grep 6lbr` and `ps aux | grep wrapsix`

Now prepare the Ubidots application!

=== Ubidots IPv6 example in native Contiki

The example will demonstrate the basic functionality of Contiki's Ubidots library:

* How to use the library to POST to a variable.
* How to use the library to POST to a collection.
* How to receive (parts of) the HTTP reply.

At the present time the Ubidots example was to be merged to Contiki, however the functional
example can be browsed and forked from the following:

https://github.com/g-oikonomou/contiki/tree/ubidots-demo

The Contiki's Ubidots Library was written by George Oikonomou (http://www.spd.gr/).

The Ubidots example is located at `examples/ipv6/ubidots`.

Ubidots application is implemented at `apps/ubidots`.

Ubidots application uses TCP sockets to connect to the host `things.ubidots.com`, which has the following IPv4 and IPv6 endpoints:

image::./images/5/image05.png[]

To check what's going on enable the debug print statements in the `ubidots.c` file, search for `#define DEBUG DEBUG_NONE` and replace with:

[source, perl]
----
#define DEBUG DEBUG_PRINT
----

As we are using NAT64 without a Bind installation to translate A records to AAAA, at `examples/ipv6/ubidots` add this to the `project-conf.h` file:

[source, perl]
----
#define UBIDOTS_CONF_REMOTE_HOST "64:ff9b::3217:7c44"
----

The Ubidots demo posts every 30 seconds the Z1 mote's *uptime* and *sequence number*, so as done before in the past sections we need to create these two variables at Ubidots.  Create the data source, its variables and then open `project-conf.h` file and replace the following accordingly:

[source, perl]
----
#define UBIDOTS_DEMO_CONF_UPTIME       "XXXX"
#define UBIDOTS_DEMO_CONF_SEQUENCE     "XXXX"
----

The last step is to assign an Ubidot's fixed Short Token so we don't have to request one from time to time when it expires, get one and add this to the `Makefile`, the file should look like this:

[source]
----
DEFINES+=PROJECT_CONF_H=\"project-conf.h\"
CONTIKI_PROJECT = ubidots-demo
APPS = ubidots
UBIDOTS_WITH_AUTH_TOKEN=XXXXXXXX
ifdef UBIDOTS_WITH_AUTH_TOKEN
  DEFINES+=UBIDOTS_CONF_AUTH_TOKEN=\"$(UBIDOTS_WITH_AUTH_TOKEN)\"
endif
all: $(CONTIKI_PROJECT)
CONTIKI_WITH_IPV6 = 1
CONTIKI = ../../..
include $(CONTIKI)/Makefile.include
----

Note that you should replace the `UBIDOTS_WITH_AUTH_TOKEN` *without using ""* quotes.

Now everything should be set, let's compile and program a Z1 mote!

[source, perl]
----
make TARGET=z1 savetarget
make clean && make ubidots-demo.upload && make z1-reset && make login
----

You should see the following output:

[source, perl]
----
connecting to /dev/ttyUSB0 (115200) [OK]
Rime started with address 193.12.0.0.0.0.0.158
MAC c1:0c:00:00:00:00:00:9e Ref ID: 158
Contiki-d368451 started. Node id is set to 158.
nullmac nullrdc, channel check rate 128 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:009e
Starting 'Ubidots demo process'
Ubidots client: STATE_ERROR_NO_NET
Ubidots client: STATE_ERROR_NO_NET
Ubidots client: STATE_ERROR_NO_NET
Ubidots client: STATE_STARTING
Ubidots client: Checking 64:ff9b::3217:7c44
Ubidots client: 'Host: [64:ff9b::3217:7c44]' (remaining 44)
Ubidots client: STATE_TCP_CONNECT (1)
Ubidots client: Connect 64:ff9b::3217:7c44 port 80
event_callback: connected
Ubidots client: STATE_TCP_CONNECTED
Ubidots client: Prepare POST: Buffer at 199
Ubidots client: Enqueue value: Buffer at 210
Ubidots client: POST: Buffer at 211, content-length 13 (2), at 143
Ubidots client: POST: Buffer at 208
Ubidots client: STATE_POSTING (176)
Ubidots client: STATE_POSTING (176)
Ubidots client: STATE_POSTING (144)
Ubidots client: STATE_POSTING (112)
Ubidots client: STATE_POSTING (80)
Ubidots client: STATE_POSTING (48)
Ubidots client: STATE_POSTING (16)
Ubidots client: STATE_POSTING (0)
Ubidots client: HTTP Reply 200
HTTP Status: 200
Ubidots client: New header: <Server: nginx>
Ubidots client: New header: <Date: Fri, 13 Mar 2015 09:35:08 GMT>
Ubidots client: New header: <Content-Type: application/json>
Ubidots client: New header: <Transfer-Encoding: chunked>
Ubidots client: New header: <Connection: keep-alive>
Ubidots client: New header: <Vary: Accept-Encoding>
Ubidots client: Client wants header 'Vary'
H: 'Vary: Accept-Encoding'
Ubidots client: New header: <Vary: Accept>
Ubidots client: Client wants header 'Vary'
H: 'Vary: Accept'
Ubidots client: New header: <Allow: GET, POST, HEAD, OPTIONS>
Ubidots client: Chunk, len 22: <[{"status_code": 201}]> (counter = 22)
Ubidots client: Chunk, len 0: <(End of Reply)> (Payload Length 22 bytes)
P: '[{"status_code": 201}]'
----

We are now posting to Ubidots!  Let's check at the Border Router:

image::./images/5/image06.png[]

The Ubidots Z1 mote is listed in the `Sensors` tab, then let's check at the Ubidots site.

image::./images/5/image07.png[scaledwidth="75%"]

The values are displayed using a *Multi-line chart* and a *Table-Values* dashboard.
