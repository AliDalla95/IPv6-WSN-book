== IPv6 communication in Contiki and IoT/M2M protocols

The aim of this section is to introduce the reader to the most used protocols in IoT, already present in Contiki,
most from a M2M background, now making its way to most common IoT applications and services.

This section goes as follow:

* Revisiting the Z1 Websense application on Z1 Motes.

* UDP communication between network and host.

* CoAP example and Firefox Copper plugin.

* RESTfull HTTP example with curl.

* MQTT example.


=== Revisiting the Z1 Websense application on Z1 Motes.

We expect your machine to have an IPv6 address, either via the existing cabled network or via a tunnel (such as Gogo6 or Hurricane Electric or others).

In the past examples we have deployed and analyzed link-local networks only, now we will take a step further and connect our networks to external ones, allowing them to be reachable from outside and communicate globally to other networks using 6loWPAN and IPv6.

This small example will allow to add a working webserver to your IPv6 network in Contiki, this serves as a starting point to implement more complete applications based on the webserver functionalities.

As we did in previously, we will be working with the `examples/z1/ipv6/z1-websense` application.  The sensors enabled for this test are temperature and battery level.

*Border-Router:*

[source, perl]
----
cd examples/ipv6/rpl-border-router/
make TARGET=z1 savetarget
make border-router.upload && make connect-router
----

*Webserver*

To compile and program a mote just execute:

[source, perl]
----
cd examples/z1/ipv6/z1-websense
make z1-websense.upload
----

When the script finish uploading the image to the mote, verify that the application is running properly and check the IPv6 address:

[source, perl]
----
make z1-reset && make login
connecting to /dev/ttyUSB0 (115200) [OK]
Node id is not set, using Z1 product ID
Rime started with address 193.12.0.0.0.0.18.233
MAC c1:0c:00:00:00:00:12:e9 Ref ID: 4841
Contiki-2.6-2071-gc169b3e started. Node id is set to 4841.
CSMA ContikiMAC, channel check rate 8 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:12e9
Starting 'Sense Web Demo'
----

Then go to the border-router (see in section above how to access the border router via web browser) and verify that the webserver is in the network:

[source, perl]
----
Neighbors
fe80::c30c:0:0:12e9

Routes
aaaa::c30c:0:0:12e9/128 (via fe80::c30c:0:0:12e9)
----

You should be able to ping both the Border Router and the devices in the network.

Point your browser to `http://[aaaa::c30c:0:0:12e9]` and see the available readings.

TIP: Launch Wireshark and capture traffic of tun0 interface, browse the webserver and see what happens.

=== UDP communication between network and host.

.What is UDP?
****
UDP (User Datagram Protocol) is a communications protocol that offers a limited amount of service when messages are exchanged between devices in a network that uses the Internet Protocol (IP).

UDP is an alternative to the Transmission Control Protocol (TCP) and, together with IP, is sometimes referred to as UDP/IP. Like the Transmission Control Protocol, UDP uses the Internet Protocol to actually get a data unit (called a datagram) from one computer to another.

Unlike TCP, UDP does not provide message fragmentation and reassembling at the other end, this means that the application must be able to make sure that the entire message has arrived and is in the right order.

Network applications that want to save processing time because they have very small data units to exchange (and therefore very little message reassembling to do) may prefer UDP to TCP
****

In this exercise we are going to send UDP messages from a Z1 mote in a network to an UDP Server running on the host, being UDP the simplest way to send short messages without the overhead TCP poses.

*UDP client*

In the `udp-client.c` file at `examples/ipv6/rpl-udp`. set the server address to be `aaaa::1` (the host address), replace the options there (Mode 2 is default) and add:

[source, perl]
----
uip_ip6addr(&server_ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 1);
----

To verify that we have set the address correctly let's print the server address, in the `print_local_addresses` function add this to the end:

[source, perl]
----
PRINTF("Server address: ");
PRINT6ADDR(&server_ipaddr);
PRINTF("\n");
----

The UDP connection is created in the following block:

[source, perl]
----
/* new connection with remote host */
client_conn = udp_new(NULL, UIP_HTONS(UDP_SERVER_PORT), NULL);
if(client_conn == NULL) {
  PRINTF("No UDP connection available, exiting the process!\n");
  PROCESS_EXIT();
}
udp_bind(client_conn, UIP_HTONS(UDP_CLIENT_PORT));
----

And upon receiving a message the `tcpip_handler` is called to process the incoming data:

[source, perl]
----
static void
tcpip_handler(void)
{
  char *str;

  if(uip_newdata()) {
    str = uip_appdata;
    str[uip_datalen()] = '\0';
    printf("DATA recv '%s'\n", str);
  }
}
----

Compile and program the mote:

[source, perl]
----
cd examples/ipv6/rpl-udp
make TARGET=z1 savetarget
make udp-client.upload && make z1-reset && make login

Rime started with address 193.12.0.0.0.0.0.158
MAC c1:0c:00:00:00:00:00:9e Ref ID: 158
Contiki-2.6-2071-gc169b3e started. Node id is set to 158.
CSMA ContikiMAC, channel check rate 8 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:009e
Starting 'UDP client process'
UDP client process started
Client IPv6 addresses: aaaa::c30c:0:0:9e
fe80::c30c:0:0:9e
Server address: aaaa::1
Created a connection with the server :: local/remote port 8765/5678
DATA send to 1 'Hello 1'
DATA send to 1 'Hello 2'
DATA send to 1 'Hello 3'
DATA send to 1 'Hello 4'
----

*UDP Server*

The UDP server is a python script that echoes any incoming data back to the client, useful to test the bi-directional communication between the host and the network.

The `UDP6.py` script can be executed as a single-shot UDP client or as a UDP Server binded to a specific address and port, for this example we are to bind to address `aaaa::1` and port `5678`.

The script content is below:

[source, python]
----
#! /usr/bin/env python

import sys
from socket import *
from socket import error

PORT      = 5678
BUFSIZE   = 1024

#------------------------------------------------------------#
# Start a client or server application for testing
#------------------------------------------------------------#
def main():
        if len(sys.argv) < 2:
                usage()
        if sys.argv[1] == '-s':
                server()
        elif sys.argv[1] == '-c':
                client()
        else:
                usage()

#------------------------------------------------------------#
# Prints the instructions
#------------------------------------------------------------#
def usage():
        sys.stdout = sys.stderr
        print 'Usage: udpecho -s [port]            (server)'
        print 'or:    udpecho -c host [port] <file (client)'
        sys.exit(2)

#------------------------------------------------------------#
# Creates a server, echoes the message back to the client
#------------------------------------------------------------#
def server():
    if len(sys.argv) > 2:
        port = eval(sys.argv[2])
    else:
        port = PORT

    try:
        s = socket(AF_INET6, SOCK_DGRAM)
        s.bind(('aaaa::1', port))
    except Exception:
        print "ERROR: Server Port Binding Failed"
        return
    print 'udp echo server ready: %s' % port
    while 1:
        data, addr = s.recvfrom(BUFSIZE)
        print 'server received', `data`, 'from', `addr`
        s.sendto(data, addr)

#------------------------------------------------------------#
# Creates a client that sends an UDP message to a server
#------------------------------------------------------------#
def client():
    if len(sys.argv) < 3:
        usage()
    host = sys.argv[2]
    if len(sys.argv) > 3:
        port = eval(sys.argv[3])
    else:
        port = PORT
    addr = host, port
    s = socket(AF_INET6, SOCK_DGRAM)
    s.bind(('', 0))
        print 'udp echo client ready, reading stdin'
    try:
        s.sendto("hello", addr)
    except error as msg:
        print msg
    data, fromaddr = s.recvfrom(BUFSIZE)
    print 'client received', `data`, 'from', `fromaddr`

#------------------------------------------------------------#
# MAIN APP
#------------------------------------------------------------#
main()
----

To execute the `UDP6.py` script just run:

[source, perl]
----
python UDP6.py -s 5678
----

This is the expected output when running and receiving an UDP packet:

[source, perl]
----
udp echo server ready: 5678
server received 'Hello 198 from the client' from ('aaaa::c30c:0:0:9e', 8765, 0, 0)
----

The Server then echoes back the message to the UDP client to the given `8765` port, this is the expected output from the mote:

[source, perl]
----
DATA send to 1 'Hello 198'
DATA recv 'Hello 198 from the client'
----

image::./images/4/image01.jpg[]

=== CoAP example and Firefox Copper plug-in.

.What is CoAP?
****
Constrained Application Protocol (CoAP) is a software protocol intended to be used in very simple electronics devices that allows them to communicate interactively over the Internet. It is particularly targeted for small low power sensors, switches, valves and similar components that need to be controlled or supervised remotely, through standard Internet networks. CoAP is an application layer protocol that is intended for use in resource-constrained internet devices, such as WSN nodes. CoAP is designed to easily translate to HTTP for simplified integration with the web, while also meeting specialized requirements such as multicast support, very low overhead, and simplicity.

Multicast, low overhead, and simplicity are extremely important for Internet of Things (IoT) and Machine-to-Machine (M2M) devices, which tend to be deeply embedded and have much less memory and processing power than traditional internet devices have. Therefore, efficiency is very important. CoAP can run on most devices that support UDP. CoAP makes use of two message types, requests and responses, using a simple binary base header format. The base header may be followed by options in an optimized Type-Length-Value format. CoAP is by default bound to UDP and optionally to DTLS, providing a high level of communications security.

Any bytes after the headers in the packet are considered the message body (if any is present). The length of the message body is implied by the datagram length. When bound to UDP the entire message MUST fit within a single datagram. When used with 6LoWPAN as defined in RFC 4944, messages should fit into a single IEEE 802.15.4 frame to minimize fragmentation.
****

First get the Copper (Cu) CoAP user-agent from https://addons.mozilla.org/en-US/firefox/addon/copper-270430/

image::./images/4/image00.png[scaledwidth="30"]

Copper is a generic browser for the Internet of Things based on the Constrained Application Protocol (CoAP), a user-friendly management tool for networked embedded devices. As it is integrated into web browsers, it allows an intuitive interaction and with the presentation layer making easier to debug existing CoAP devices.

More information available at:

http://people.inf.ethz.ch/mkovatsc/copper.php


==== Preparing the setup

For this practice we will use 3 motes: BR, server and client.

Ensure that  the 3 motes you will be using to test this (border router, client, server) have flashed a Node ID to generate the MAC/IPv6 addresses as done in previous sessions, be sure to write down the addresses!

Another thing, if you get an error like the following, go to `platform/z1/contiki-conf.h` and change `UIP_CONF_BUFFER_SIZE` to 240:

[source, perl]
----
#error "UIP_CONF_BUFFER_SIZE too small for REST_MAX_CHUNK_SIZE"
make: *** [obj_z1/er-coap-07-engine.o] Error 1
----

Be sure the settings are consistent, at the `examples/ipv6/rpl-border-router` in the `project-conf.h` file add the following:

[source, perl]
----
#undef NETSTACK_CONF_RDC
#define NETSTACK_CONF_RDC     nullrdc_driver

#undef NETSTACK_CONF_MAC
#define NETSTACK_CONF_MAC     nullmac_driver
----

*Server:*

[source, perl]
----
cd examples/er-rest-example/
make TARGET=z1 savetarget
make er-example-server.upload && make z1-reset && make login
----

Write down the IPv6 server address, disconnect the mote and connect another one to be used as client...

*Client:*

Remember the server address? edit the er-example-client.c and replace in this line:

[source, perl]
----
SERVER_NODE(ipaddr)   uip_ip6addr(ipaddr, 0xaaaa, 0, 0, 0, 0xc30c, 0x0000, 0x0000, 0x039c)
----

Then compile and flash the client:
[source, perl]
----
make er-example-client.upload
----

Disconnect the mote, connect another one to be used as border-router:

*Border-Router:*

[source, perl]
----
cd ../ipv6/rpl-border-router/
make TARGET=z1 savetarget
make border-router.upload && make connect-router
----

Don't close this window! leave the mote connected, now you will be watching something like this:

[source, perl]
----
SLIP started on ``/dev/ttyUSB0''
opened tun device ``/dev/tun0''
ifconfig tun0 inet `hostname` up
ifconfig tun0 add aaaa::1/64
ifconfig tun0 add fe80::0:0:0:1/64
ifconfig tun0

tun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00
     inet addr:127.0.1.1  P-t-P:127.0.1.1  Mask:255.255.255.255
     inet6 addr: fe80::1/64 Scope:Link
     inet6 addr: aaaa::1/64 Scope:Global
     UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1
     RX packets:0 errors:0 dropped:0 overruns:0 frame:0
     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:500
     RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

Rime started with address 193.12.0.0.0.0.3.229
MAC c1:0c:00:00:00:00:03:e5 Contiki-2.5-release-681-gc5e9d68 started. Node id is set to 997.
CSMA nullrdc, channel check rate 128 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:03e5
Starting 'Border router process' 'Web server'
Address:aaaa::1 => aaaa:0000:0000:0000
Got configuration message of type P
Setting prefix aaaa::
Server IPv6 addresses:
aaaa::c30c:0:0:3e5
fe80::c30c:0:0:3e5
----

Let's ping the border-router:

[source, perl]
----
ping6 aaaa:0000:0000:0000:c30c:0000:0000:03e5
PING aaaa:0000:0000:0000:c30c:0000:0000:03e5(aaaa::c30c:0:0:3e5) 56 data bytes
64 bytes from aaaa::c30c:0:0:3e5: icmp_seq=1 ttl=64 time=21.0 ms
64 bytes from aaaa::c30c:0:0:3e5: icmp_seq=2 ttl=64 time=19.8 ms
64 bytes from aaaa::c30c:0:0:3e5: icmp_seq=3 ttl=64 time=22.2 ms
64 bytes from aaaa::c30c:0:0:3e5: icmp_seq=4 ttl=64 time=20.7 ms
----

Now connect the server mote, ping it too:

[source, perl]
----
ping6 aaaa:0000:0000:0000:c30c:0000:0000:0001
PING aaaa:0000:0000:0000:c30c:0000:0000:0001(aaaa::c30c:0:0:1) 56 data bytes
64 bytes from aaaa::c30c:0:0:1: icmp_seq=1 ttl=63 time=40.3 ms
64 bytes from aaaa::c30c:0:0:1: icmp_seq=2 ttl=63 time=34.2 ms
64 bytes from aaaa::c30c:0:0:1: icmp_seq=3 ttl=63 time=35.7 ms
----

And connect the client mote, assuming it is connected in `/dev/ttyUSB2` port:

[source, perl]
----
make login MOTES=/dev/ttyUSB2
../../tools/sky/serialdump-linux -b115200 /dev/ttyUSB2
connecting to /dev/ttyUSB2 (115200) [OK]
Rime started with address 193.12.0.0.0.0.0.158
MAC c1:0c:00:00:00:00:00:9e Contiki-2.5-release-681-gc5e9d68 started. Node id is set to 158.
CSMA nullrdc, channel check rate 128 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:009e
Starting 'COAP Client Example'
Press a button to request .well-known/core
--Requesting .well-known/core--
|</.well-known/core>;ct=40,</hello>;title="Hello world: ?len=0.."|;rt="Text",</tes|t/push>;title="P| demo";obs,</tes|itle="Sub-resour||g|b, POST/PUT m|le="Red LED";rt=|BlockOutOfScope
--Done--
----

Now we can start discovering the Server resources, Open Firefox and type the server address:

[source, perl]
----
coap://[aaaa::c30c:0000:0000:0001]:5683/
----

And began by discovering the available resources, Press `DISCOVER` and the page will be populated in the left side:

If you select the `toggle` resource and use `POST` you can see how the RED led of the server mote will toggle:

If you do the same with the `Hello` resource, the server will answer you back with a neighbourly well-known message:

And finally if you observe the `Sensors`-> `Button` events by selecting it and clicking `OBSERVE`, each time you press the user button an event will be triggered and reported back:

Finally if you go to the `er-example-server.c` file and enable the following defines, you should have more resources available:

[source, perl]
----
#define REST_RES_HELLO    1
#define REST_RES_SEPARATE 1
#define REST_RES_PUSHING  1
#define REST_RES_EVENT    1
#define REST_RES_SUB      1
#define REST_RES_LEDS     1
#define REST_RES_TOGGLE   1
#define REST_RES_BATTERY  1
#define REST_RES_RADIO    1
----

And now to get the current RSSI level on the CC2420 transceiver:

[source, perl]
----
coap://[aaaa::c30c:0000:0000:0001]:5683/sensor/radio?p=rssi
----

Do the same to get the battery level readings:
[source, perl]
----
coap://[aaaa::c30c:0000:0000:0001]:5683/sensors/battery
----

This last case returns the ADC units when the mote is connected to the USB, the actual value in millivolts would be:
[source, perl]
----
V [mV] = (units * 5000)/4096
----

Let's say you want to turn the green LED ON, in the URL type:

[source, perl]
----
coap://[aaaa::c30c:0000:0000:0001]:5683/actuators/leds?color=g
----

And then in the payload (the ongoing tab) write:

[source, perl]
----
mode="on"
----

And press `POST` or `PUT` (hover with the mouse over the actuators/leds to see the description and allowed methods).

image::./images/4/image02.png[scaledwidth="75%"]


=== RESTfull HTTP example with curl.

.What is REST?
****
REST stands for Representational State Transfer. (It is sometimes spelled "ReST".) It relies on a stateless, client-server, cacheable communications protocol - and in virtually all cases, the HTTP protocol is used.

REST and the Internet of Things (and Services) can be an excellent match. REST implementations are lightweight: HTTP clients and servers are now available even on the smallest, IP-enabled platforms.

The key abstraction of a RESTful web service is the resource, not a service. Sensors, actuators and control systems in general can be elegantly represented as resources and their service exposed through a RESTful web service.

RESTful applications use HTTP requests to post data (create and/or update), read data (e.g., make queries), and delete data. Thus, REST uses HTTP for all four CRUD (Create/Read/Update/Delete) operations.

Despite being simple, REST is fully-featured; there's basically nothing you can do in Web Services that can't be done with a RESTful architecture. REST is not a standard.

http://www.restapitutorial.com/
****

Install curl

[source, perl]
----
sudo apt-get install curl
----

In `/examples/rest-example/Makefile` switch to a HTTP build by disabling CoAP as follow `WITH_COAP = 0`.

Ensure that the two motes you will be using to test this (Border Router, HTTP server) have flashed a MAC/IPv6 address, be sure to write down the addresses!
If you get an error like the following, Go to `platform/z1/contiki-conf.h` and change `UIP_CONF_BUFFER_SIZE` to 240, or just add this to a `project-conf.h file`.

[source, perl]
----
#error "UIP_CONF_BUFFER_SIZE too small for REST_MAX_CHUNK_SIZE"
make: *** [obj_z1/er-coap-07-engine.o] Error 1
----

*Server:*

[source, perl]
----
cd /examples/rest-example/
make TARGET=z1 savetarget
make rest-server-example.upload && make z1-reset && make login
----
Write down the address, Press Ctrl + C to stop the serialdump script.

*Border-Router:*

[source, perl]
----
cd ../ipv6/rpl-border-router/
make TARGET=z1 savetarget
make border-router.upload && make connect-router
----

Don't close this window! leave the mote connected, now you will be seeing something like this:

[source, perl]
----
make connect-router
using saved target 'z1'
sudo ../../../tools/tunslip6 aaaa::1/64
SLIP started on ``/dev/ttyUSB0''
opened tun device ``/dev/tun0''
ifconfig tun0 inet `hostname` up
ifconfig tun0 add aaaa::1/64
ifconfig tun0 add fe80::0:0:0:1/64
ifconfig tun0

tun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00
     inet addr:127.0.1.1  P-t-P:127.0.1.1  Mask:255.255.255.255
     inet6 addr: fe80::1/64 Scope:Link
     inet6 addr: aaaa::1/64 Scope:Global
     UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1
     RX packets:0 errors:0 dropped:0 overruns:0 frame:0
     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:500
     RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

*** Address:aaaa::1 => aaaa:0000:0000:0000
Got configuration message of type P
Setting prefix aaaa::
Server IPv6 addresses:
aaaa::c30c:0:0:0
fe80::c30c:0:0:0
----

Ping both motes (the http-server in this example has `aaaa::c30c:0:0:97`):

[source, perl]
----
ping6 aaaa::c30c:0:0:97
PING aaaa::c30c:0:0:97(aaaa::c30c:0:0:97) 56 data bytes
64 bytes from aaaa::c30c:0:0:97: icmp_seq=1 ttl=63 time=41.6 ms
64 bytes from aaaa::c30c:0:0:97: icmp_seq=2 ttl=63 time=44.0 ms
64 bytes from aaaa::c30c:0:0:97: icmp_seq=3 ttl=63 time=42.4 ms

aaaa::c30c:0:0:97 ping statistics
3 packets transmitted, 3 received, 0% packet loss, time 2002ms
rtt min/avg/max/mdev = 41.641/42.706/44.023/1.016 ms
----

Discover the available resources:

[source, perl]
----
curl -H "User-Agent: curl" aaaa::c30c:0:0:0097:8080/.well-known/core
</helloworld>;n="HelloWorld",</led>;n="LedControl"
----

Now let's use curl (http client) to get information from the mote and send commands:

[source, perl]
----
curl -H "User-Agent: curl" aaaa::c30c:0:0:0097:8080/helloworld
Hello World!

curl -H "User-Agent: curl" aaaa::c30c:0:0:0097:8080/led?color=green -d mode=on -i -v
* About to connect() to aaaa::c30c:0:0:0097 port 8080 (#0)
*   Trying aaaa::c30c:0:0:97... connected
* Connected to aaaa::c30c:0:0:0097 (aaaa::c30c:0:0:97) port 8080 (#0)
> POST /led?color=green HTTP/1.1
> Host: aaaa::c30c:0:0:0097:8080
> Accept: */*
> User-Agent: curl
> Content-Length: 7
> Content-Type: application/x-www-form-urlencoded
>
< HTTP/1.1 200 OK
HTTP/1.1 200 OK
< Server: Contiki
Server: Contiki
< Connection: close
Connection: close

<
* Closing connection #0

$ curl -H "User-Agent: curl" aaaa::c30c:0:0:0097:8080/led?color=green -d mode=off -i
HTTP/1.1 200 OK
Server: Contiki
Connection: close
----
