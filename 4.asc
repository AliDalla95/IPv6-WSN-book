== Wireless with Contiki

In the previous section we covered some of the core features of Contiki, sensor basics and a general overview of how the applications are build, programed and simulated in Contiki.  This section introduces the wireless communication, and basics about configuring our platforms, and a better understanding about the radios.

=== Preparing your device

The very first step is understanding how our platform is configured.

Each platform implements its own set of default values and configurations, to be used by underlying modules like the radio, serial port, amongst others.

The place to go for the Zolertia platform are the following:

* Specific hardware settings: parameters as the default I2C selected pins, ADC channels, module-specific pin assignment and platform information can be found at `platform/remote/dev/board.h` and `platform/z1/platform-conf.h`.

* Specific Contiki settings: UART settings, MAC driver, radio channel, IPv6, RIME and network buffer configuration, among others, can be found at `platform/remote/contiki-conf.h` and `platform/z1/contiki-conf.h`.

As a general good practice, user configurable parameters are normally allowed to be overrided by the applications, this also serves as a guideline to discern which values can be changed by the user, from those meant to be changed only if you really know what you are doing.  Below is an example:

[source, c]
----
#ifndef UART0_CONF_BAUD_RATE
#define UART0_CONF_BAUD_RATE 115200
#endif
----

By defining `UART0_CONF_BAUD_RATE` in our application's `project-conf.h`, we can change the default 115200 bps baudrate.  Notice how is a general good practice to add `CONF` to the user configurable parameters.

[TIP]
====
One of your most used tools would probably be `grep`, a handy command to search for a text string in any document or location.  One way to run this command is `grep -lr "alinan .`, if executed at the root of our Contiki installation, it will list recursively all the files authored by Antonio Lignan.  This is a good way to check the location of a specific definition, if you are not using an IDE like Eclipse.
Check `man grep` for more information.

For windows http://astrogrep.sourceforge.net/[Astrogrep] is a good option.
====

In the next section we will review the most notable parameters to configure, but as usual depending on your application and setup, the best way to ensure everything is properly set is by reviewing the specific platform configuration files, and modify or redefine accordingly.

==== Device addressing

To start working you must first define the Node ID of each node, this will be used to generate the mote's MAC address and the IPv6 addresses (link-local and global).

===== RE-Mote addresses

The *RE-Mote* platform comes with two pre-loaded MAC address stored in its internal flash memory, alternatively the user can used the saved MAC address, or use a hardcoded one.  The following switchs at `platform/remote/contiki-conf.h` selects either one.

[source, c]
----
/**
  * \name IEEE address configuration
  *
  * Used to generate our RIME & IPv6 address
  * @{
  */
/**
  * \brief Location of the IEEE address
  * 0 => Read from InfoPage,
  * 1 => Use a hardcoded address, configured by IEEE_ADDR_CONF_ADDRESS
  */
#ifndef IEEE_ADDR_CONF_HARDCODED
#define IEEE_ADDR_CONF_HARDCODED             0
#endif

/**
 * \brief Location of the IEEE address in the InfoPage when
 * IEEE_ADDR_CONF_HARDCODED is defined as 0
 * 0 => Use the primary address location
 * 1 => Use the secondary address location
 */
#ifndef IEEE_ADDR_CONF_USE_SECONDARY_LOCATION
#define IEEE_ADDR_CONF_USE_SECONDARY_LOCATION 0
#endif
----

If using your own hardcoded address, the following define can be overriden by the application:

[source, c]
----
#ifndef IEEE_ADDR_CONF_ADDRESS
#define IEEE_ADDR_CONF_ADDRESS { 0x00, 0x12, 0x4B, 0x00, 0x89, 0xAB, 0xCD, 0xEF }
#endif
----

===== Z1 mote addresses

Let's use the ID from the motelist:

[source, bash]
----
Reference  Device       Description
--------------------------------------------------
Z1RC3301   /dev/ttyUSB0 Silicon Labs Zolertia Z1
----

The node ID should be `3301` (decimal) if not previously saved node ID is found in the flash memory.

Let’s see how Contiki uses this to derive a full IPv6 and MAC address.  At `platforms/z1/contiki-z1-main.c`

[source, c]
----
#ifdef SERIALNUM
  if(!node_id) {
    PRINTF("Node id is not set, using Z1 product ID\n");
    node_id = SERIALNUM;
  }
#endif
node_mac[0] = 0xc1; /* Hardcoded for Z1 */
node_mac[1] = 0x0c; /* Hardcoded for Revision C */
node_mac[2] = 0x00; /* Hardcoded to arbitrary even number so that the 802.15.4 MAC address is compatible with an Ethernet MAC address - byte 0 (byte 2 in the DS ID) */
node_mac[3] = 0x00; /* Hardcoded */
node_mac[4] = 0x00; /* Hardcoded */
node_mac[5] = 0x00; /* Hardcoded */
node_mac[6] = node_id >> 8;
node_mac[7] = node_id & 0xff;
}
----

So the node’s addresses the mote should have will be :

[source, bash]
----
MAC c1:0c:00:00:00:00:0c:e5
Node id is set to 3301.
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:0ce5
----

Where `0xce5` is the hex value corresponding to `3301`.  The global address is only set when an IPv6 prefix is assigned (you should know this from earlier sections by now).

If you wish instead to have your own addressing scheme, you can edit the node_mac values at `contiki-z1-main.c` file.  If you wish to assign a different node id value than the obtained from the product id, then you would need to store a new one in the flash memory, luckily there is already an application to do so:

Go to `examples/z1` location and replace the `158` for your own required value:

[source]
----
make clean && make burn-nodeid.upload nodeid=158 nodemac=158 && make z1-reset && make login
----

You should see the following:

[source, bash]
----
MAC c1:0c:00:00:00:00:0c:e5 Ref ID: 3301
Contiki-2.6-1803-g03f57ae started. Node id is set to 3301.
CSMA ContikiMAC, channel check rate 8 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:0ce5
Starting 'Burn node id'
Burning node id 158
Restored node id 158
----

As you can see, now the node ID has been changed to 158, when you restart the mote you should now see that the changes are applied:

[source, bash]
----
MAC c1:0c:00:00:00:00:00:9e Ref ID: 3301
Contiki-2.6-1803-g03f57ae started. Node id is set to 158.
CSMA ContikiMAC, channel check rate 8 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:009e
----

==== Set the bandwidth and channel

The bandwidth and allowed channels depends on the operating frequency band.  Depending on the country a different set of parameters and restrictions are enforced by the regulation agency.

.*The IEEE 802.15.4 standard*
****
The IEEE 802.15.4 is a standard for wireless communication, it specifies the physical layer and media access control for low-rate wireless personal area networks (LR-WPANs).

The standard specifies that communication can occur in the 868-868.8 MHz (primarily for Europe), the 902-928 MHz (United States, Canada, and territories that accept the FCC regulations), or the more world-wide 2.400-2.4835 GHz Industrial Scientific and Medical applications (ISM).

.IEEE 802.15.4 2.4GHz regulation requirements (http://electronicdesign.com/what-s-difference-between/what-s-difference-between-ieee-802154-and-zigbee-wireless[electronicdesign.com, 2013])
image::./images/4/image013.gif[scaledwidth="80"]


In practice the 2.4 GHz band has been widely used due to its world-wide availability.  ZigBee propietary protocol by the ZigBee alliance was one of the IEEE 802.15.4 early adopter, it uses its physical and MAC layer to built on top additional routing and networking functionality to provide mesh networks.

Quite recently the http://threadgroup.org/[Thread Group]
has proposed its own simplified IPv6-based mesh networking protocol, for connecting products around the home to each other, to the internet and to the cloud.  This will surely boost the IEEE 802.15.4 and IPv6 to a wider adoption.

.Thread layers and standards (http://threadgroup.org/[Thread group, 2015])
image::./images/4/image014.gif[scaledwidth="80"]

****

===== Working with 2.4GHz

As the 2.4Ghz band is also occupied by other technologies like WiFi and Bluetooth, the wireless spectrum is shared and some channels might overlap between technologies.  The Figure below shows the channel allocation of the 2.4GHz IEEE 802.15.4, and the recommended channels to avoid interferences with other co-located devices.  With the rise of the Bluetooth low Energy, and the ubiquitous WiFi present in our lives, the selection of a proper operating channel is more crucial in any deployment. 

image::./images/4/image001.png[]

The default channel of the *RE-Mote* is defined as follows:

[source, c]
----
#ifndef CC2538_RF_CONF_CHANNEL
#define CC2538_RF_CONF_CHANNEL              25
#endif /* CC2538_RF_CONF_CHANNEL */
----

The *Z1 mote* defines its default channel as:

[source, c]
----
#ifdef RF_CHANNEL
#define CC2420_CONF_CHANNEL RF_CHANNEL
#endif
 
#ifndef CC2420_CONF_CHANNEL
#define CC2420_CONF_CHANNEL              26
#endif /* CC2420_CONF_CHANNEL */
----

From the application's `project-conf.h` or the `Makefile` then the radio channel can be defined.

The radio drivers in Contiki are implemented to comply with the `struct radio_driver` in `core/edv/radio.h`.  This abstraction allows to interact with the radio using a standarized API, independently of the radio hardware.  Two of its functions are explained below, to set and read radio parameters.

[source, c]
----
/** Get a radio parameter value. */
radio_result_t (* get_value)(radio_param_t param, radio_value_t *value);

/** Set a radio parameter value. */
radio_result_t (* set_value)(radio_param_t param, radio_value_t value);
----

To change the channel programatically from the application the `RADIO_PARAM_CHANNEL` is used as follows.

[source, c]
----
rd = NETSTACK_RADIO.set_value(RADIO_PARAM_CHANNEL, value);
----

Where `value` can be any value from 11 to 26, and rd it will be either `RADIO_RESULT_INVALID_VALUE` or `RADIO_RESULT_OK`.

===== Working with 863-950MHz

The *RE-Mote* has a dual 2.4GHz and 863-950Mhz RF interface, which can be alternatively selected, or used simultaneously (the later currently not supported in Contiki).

As default the RE-Mote uses the IEEE 802.15.4g mandatory mode for the 868Mhz band, configured for 2-GFSK modulation, 50Kbps data rate and with 33 channels available.

The RE-Mote uses the Texas Instruments CC1200 RF transceiver, implemented in Contiki in `dev/cc1200`.  The default configuration file is located in `dev/cc1200/cc1200-802154g-863-870-fsk-50kbps.c`.

To change channels from the application we use the RF API:

[source, c]
----
rd = NETSTACK_RADIO.set_value(RADIO_PARAM_CHANNEL, value);
----

Where `value` can be any value from 11 to 26, and rd it will be either `RADIO_RESULT_INVALID_VALUE` or `RADIO_RESULT_OK`.

==== Set the transmission power

The Radio frequency power transmission is the output power's transmission of an emitter to to an antenna.  In practice the higher the transmission power the higher the wireless range, but the power consumption usually increases as well.

===== Changing the transmission power for the Z1 (CC2420) and the RE-Mote (CC2538)

The *RE-Mote* platform uses the CC2538 built-in 2.4GHz radio.  As default the transmission power is set to 3dBm in the `cpu/cc2538/cc2538-rf.h` header as shown below.

[source, c]
----
CC2538_RF_TX_POWER_RECOMMENDED 0xD5
----

This recommended value is taken from the http://www.ti.com/tool/smartrftm-studio&DCMP=hpa_rf_general&HQS=Other+OT+smartrfstudio[SmartRF Studio].  Other values and its corresponding outpot power levels are shown in the next table.

.CC2538 Transmission power recommended values (http://www.ti.com/tool/smartrftm-studio&DCMP=hpa_rf_general&HQS=Other+OT+smartrfstudio[from SmartRF Studio])
[width="60%",options="header,footer"]
|====================
|TX Power (dBm) | Value
| +7            | 0xFF
| +5            | 0xED
| +3            | 0xD5
| +1            | 0xC5
|  0            | 0xB6  
| -1            | 0xB0
| -3            | 0xA1
| -5            | 0x91
| -7            | 0x88
| -9            | 0x72
| -11           | 0x62
| -13           | 0x58
| -15           | 0x42
| -24           | 0x00
|====================

[TIP]
====
As illogical it may sounds, there are a couple of reasons to reduce transmission power:

* To reduce the power consumption.
* Test a multi-hop network without placing the nodes too far.
* Deploy co-located networks depending on the required wireless range.
====

The current consumption can go from 24mA to 34mA when changing the transmission power from 0dBm to 7dBm (http://www.ti.com/lit/an/swra437/swra437.pdf[AN125]).

The *Z1 mote* uses the Texas Instrument CC2420 RF transceiver.  As default the transmission power is set to 0dBm, which is the maximum allowed by the radio.

The available output power levels and its corresponding configuration values are listed in the table below, as well as the current consumption at each stage.

.CC2420 Transmission power  (http://www.ti.com/lit/ds/symlink/cc2420.pdf[CC2420 datasheet, page 51])
[width="60%",options="header,footer"]
|====================
|TX Power (dBm) | Value | mA
| 0             | 31    | 17.4  
| -1            | 27    | 16.5
| -3            | 23    | 15.2
| -5            | 19    | 13.9
| -7            | 15    | 12.5
| -10           | 11    | 11.2
| -15           | 7     | 9.9
| -25           | 3     | 8.5
|====================

For both platforms the transmission power can be changed with:

[source, c]
----
rd = NETSTACK_RADIO.set_value(RADIO_PARAM_TXPOWER, value);
----

Where `value` can be any value from the above table, and rd it will be either `RADIO_RESULT_INVALID_VALUE` or `RADIO_RESULT_OK`.

===== Changing the transmission power for the RE-Mote (CC1200)

As mentioned ealier, the *RE-Mote* has an on-board sub-1GHz interface based on the CC1120 radio transceiver, configured to operate in the 863-950Mhz bands.  Depending on the specific band and regulations enforced the transmission power is normally limited, be sure to check the operation limits before changing the output power.

The regulations and its requirements are out of the scope of this section.

The following values are taken from the http://www.ti.com/tool/smartrftm-studio&DCMP=hpa_rf_general&HQS=Other+OT+smartrfstudio[SmartRF Studio], using default IEEE 802.15.4g ETSI compliant configuration.

.CC1200 Transmission power recommended values (http://www.ti.com/tool/smartrftm-studio&DCMP=hpa_rf_general&HQS=Other+OT+smartrfstudio[from SmartRF Studio])
[width="60%",options="header,footer"]
|====================
|TX Power (dBm) | Value
| +14           | 0x7F
| +13           | 0x7C
| +12           | 0x7A
| +11           | 0x78
| +8            | 0x71  
| +6            | 0x6C
| +4            | 0x68
| +3            | 0x66
| +2            | 0x63
| +1            | 0x61
|  0            | 0x5F
| -3            | 0x58
| -6            | 0x51
| -11           | 0x46
| -24           | 0x42
| -40           | 0x41
|====================

These values correspond to the `CC1200_PA_CFG1` register.

As default the https://github.com/contiki-os/contiki/blob/master/dev/cc1200/cc1200.c[CC1200 driver] in Contiki starts with the maximum transmission power, defined as follows:

[source, c]
----
/* The maximum output power in dBm */
#define RF_CFG_MAX_TXPOWER              CC1200_CONST_TX_POWER_MAX
----

The minimum and maximum allowed values are set in `dev/cc1200/cc1200-const.h` as shown below.

[source,]
----
/* Output power in dBm */
/* Up to now we don't handle the special power levels PA_POWER_RAMP < 3, hence
 * the minimum tx power is -16. See update_txpower().
 */
#define CC1200_CONST_TX_POWER_MIN       (-16)
/* 
 * Maximum output power will propably depend on the band we use due to 
 * regulation issues 
 */
#define CC1200_CONST_TX_POWER_MAX       14
----

The CC1200 driver calculates the proper `CC1200_PA_CFG1` register value, so we need to pass as `value` argument the required transmission power.

[source, c]
----
rd = NETSTACK_RADIO.set_value(RADIO_PARAM_TXPOWER, value);
----

Where `value` can be any value from -14 to 16, and rd it will be either `RADIO_RESULT_INVALID_VALUE` or `RADIO_RESULT_OK`.


==== Check the wireless link

Due to the changing environment conditions that normally affect the wireless systems, such as rain, interferences, obstacles, etc., measuring the wireless medium and links quality is important.

Checking the wireless medium should be done in three stages: before deploying your network, at deployment phase and later on at network runtime, to ensure the nodes creates and select the best available routes.

.Link Quality Estimation
****
Link Quality Estimation is an integral part of assuring reliability in wireless networks. Various link estimation metrics have been proposed to effectively measure the quality of wireless links.

image::./images/4/image002.png[]

The ETX metric, or expected transmission count, is a measure of the quality of a path between two nodes in a wireless packet data network. ETX is the number of expected transmissions of a packet necessary for it to be received without error at its destination. This number varies from one to infinity. An ETX of one indicates a perfect transmission medium, where an ETX of infinity represents a completely non-functional link. Note that ETX is an expected transmission count for a future event, as opposed to an actual count of a past event. It is hence a real number, generally not an integer.

ETX can be used as the routing metric. Routes with a lower metric are preferred. In a route that includes multiple hops, the metric is the sum of the ETX of the individual hops.
****

Below we describe how to read the LQI and RSSI to have a first approximation of the link conditions.

.What is RSSI?
****
RSSI (Received Signal Strenght Indicator) is a generic radio receiver technology metric used internally in a wireless networking device to determine the amount of radio energy received in a given channel.  The end-user will likely observe an RSSI value when measuring the signal strength of a wireless network through the use of a wireless network monitoring tool like Wireshark, Kismet or Inssider.

The image below shows how the Packet Reception Rate (PRR) dramatically decreases as the CC2420 RSSI values worsen.

image::./images/4/image004.png[]

There is no standardized relationship of any particular physical parameter to the RSSI reading, Vendors and chipset makers provide their own accuracy, granularity, and range for the actual power (measured as mW or dBm) and their range of RSSI values.
****

There are 2 types of RSSI readings available:

* one to measure the wireless medium to check the noise floor, used normally to assert if the medium is noisy, or to check if the medium is free to send a packet,
* and other related to the signal strenght of a received packet, thus allowing to check the wireless link strenght of an inmediate neighbor.

The first one can be read using the radio API as follows:

[source, c]
----
rd = NETSTACK_RADIO.get_value(RADIO_PARAM_RSSI, value);
----

Where `value` is a variable passed as a pointer to store the RSSI value, and rd it will be either `RADIO_RESULT_INVALID_VALUE` or `RADIO_RESULT_OK`.

To read the RSSI value of a received packet, at the `receive` callback:

[source, c]
----
packetbuf_attr(PACKETBUF_ATTR_RSSI);
----

More information about the `packetbuf` available attributes is available in `core/net/packetbuf.h`.

For the CC2420 radio frequency transceiver on the *Z1 mote*, the RSSI can range from 0 to -100, values close to 0 are related to good links and values close to -100 are closely related to a bad link, due to multiple factors such as distance, environmental, obstacles, interferences, etc.


.What is LQI?
****
LQI (Link Quality Indicator) is a digital value often provide by Chipset vendors as an indicator of how well a signal is demodulated, in terms of the strength and quality of the received packet, thus indicating a good or bad wireless medium.

The example below shows how the Packet Reception Rate decreases as the LQI decreases.

image::./images/4/image003.png[]

****

To read the LQI value we use the Radio API:

[source, c]
----
rd = NETSTACK_RADIO.get_value(PACKETBUF_ATTR_LINK_QUALITY, value);
----

Where `value` is a variable passed as a pointer to store the LQI value, and rd it will be either `RADIO_RESULT_INVALID_VALUE` or `RADIO_RESULT_OK`.

The CC2420 radio frequency transceiver used by the Z1 mote typically ranges from 110 (indicates a maximum quality frame) to 50 (typically the lowest quality frames detectable by the transceiver).

Detailed information about the CC2538 LQI calculation is found in the http://www.ti.com/lit/ug/swru319c/swru319c.pdf[CC2538 user guide].

=== Configure the MAC layer

.MAC protocols
****
Medium Access Control (MAC) protocols handle the medium access in wireless networks, by enforcing rules that coordinate when each node allowed to transmit/receive packets.

Protocols can be classified as contention-based or reservation-based protocols.

The first are based on Carrier Sensing for detecting medium activity and are prone to collisions and lower efficiency, but are easy to implement. The second group is efficient in terms of throughput and energy, but require precise synchronization and is less adaptable to dynamic traffic.
****

The MAC implementation in Contiki has 3 different layers: Framer, Radio Duty-Cycle (RDC) and Medium Access Control (MAC).

.Contiki MAC stack (http://anrg.usc.edu/contiki/index.php/MAC_protocols_in_ContikiOS[ANGR, USC 2014])
image::./images/4/image015.jpg[]

The network layers can be accessed through the global variables `NETSTACK_FRAMER`, `NETSTACK_RDC` and `NETSTACK_MAC`, which are defined in compilation time.

The variables are located in `core/net/netstack.h`, and can be defined by each platform as default and overriden by applications.

==== MAC driver

Contiki provides two MAC drivers: CSMA and NullMAC

CSMA (Carrier-Sense Medium Access) receives incoming packets from the RDC layer and uses the RDC layer to transmit packets. If the RDC layer or the radio layer detects a radio collision, the MAC layer may retransmit the packet at a later point in time. The CSMA mechanism is currently the only MAC layer that retransmits packets if a collision is detected.   CSMA protocol keep a list of packets to each of the neighbors and calculate statistics such as number of retransmissions, collisions, deferrals, etc.  The medium access check is performed by the RDC driver.

NullMAC is a simple pass-through protocol.  It calls the appropriate RDC functions.

As default both *Z1 mote* and *RE-Mote* uses the CSMA driver.

[source, c]
----
#ifndef NETSTACK_CONF_MAC
#define NETSTACK_CONF_MAC     csma_driver
#endif
----

Alternatively an user can choose NullMAC as follow:

[source,]
----
#define NETSTACK_CONF_MAC nullmac_driver
----

==== RDC driver

Radio Duty-Cycle (RDC) layer handles the sleep period of nodes.  This layer decides when packets will be transmitted and ensures nodes are awake when packets are to be received. 

The implementation of Contiki's RDC protocols are available in `core/net/mac`. The following RDC drivers are implemented: `contikimac`, `xmac`, `lpp`, `nullrdc` and `sicslowmac`.  The implementation and details of the aforementioned RDC drivers are out of the scope of this chapter.  The most commonly used is ContikiMAC.  NullRDC is a pass-through layer that never switches the radio off.  

[source, c]
----
#ifndef NETSTACK_CONF_RDC
#define NETSTACK_CONF_RDC contikimac_driver
#endif
----

RDC drivers tries to keep the radio off as much as possible, periodically checking the wireless medium for radio activity. When activity is detected, the radio is kept on to check if it has to receive the packet, or go back to sleep.

The channel check rate is given in Hz, specifying the number of channel checks per second, and the default channel check rate is 8 Hz. Channel check rates are given in powers of two and typical settings are 2, 4, 8, and 16 Hz.

[source, c]
----
#ifndef NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE
#define NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE 8
#endif
----

A packet must generally be retransmitted or "strobed" until the receiver is on and receives it.  This increments the power consumption of the transmitter node when transmitting, and increases the radio traffic, but in overall the power savings are for the radio inactive period compensates this.

One alternative to optimize the RDC is to enable "phase optimization", this delays strobing until just before the receiver is expected to wake.  This however requires a good time synchronization between the transmitter and the receiver (more details in https://github.com/contiki-os/contiki/wiki/RDC-Phase-optimization[RDC Phase Optimization]).  To enable phase optimization change the below to one.

[source, c]
----
#define CONTIKIMAC_CONF_WITH_PHASE_OPTIMIZATION 0
#define WITH_FAST_SLEEP 1
----

==== Framer driver

The Framer driver is actually a set of functions to frame the data to be transmited, and parsing the received data.  The Framer implementations are located in `core/net/mac`, of which the most noticeable ones are `framer-802154` and `framer-nullmac`.

In the *RE-Mote* platform the following configuration is done as default:

[source, c]
----
#ifndef NETSTACK_CONF_FRAMER
#if NETSTACK_CONF_WITH_IPV6
#define NETSTACK_CONF_FRAMER  framer_802154
#else /* NETSTACK_CONF_WITH_IPV6 */
#define NETSTACK_CONF_FRAMER  contikimac_framer
#endif /* NETSTACK_CONF_WITH_IPV6 */
#endif /* NETSTACK_CONF_FRAMER */
----

Meaning when IPv6 is used, the `framer-802154` is selected, else the `contikimac_framer` is used (default one for the `contikimac_driver`).

The `framer-nullmac` framer should be used together with `nullmac_driver` (MAC layer). This simply fill in the 2 fields of `nullmac_hdr`, which are: receiver address and sender address.

The `framer-802154` is implemented in `core/net/mac/framer-802154.c`. The driver frames the data in compliance to the IEEE 802.15.4 (2003) standard.  The framer insert and extracts the data to the `packetbuf` structure.

=== IPv6 and Routing

One of Contiki's most prominent feature is the support of IP protocols, being one of the first embedded operative systems to provide IPv6 support.

Alternatively Contiki also support IPv4 and non-IP communication https://github.com/alignan/contiki/tree/master/core/net/rime[(Rime)], however the remainder of this book will focus in IPv6.  There is a good set of rime examples available at `examples/rime`.  The *RE-Mote* `remote-demo.c` most basic example at `examples/remote` uses rime as well.

==== IPv6

The *uIP* is an Open Source TCP/IP stack designed to be used even with tiny 8 and 16 bit microcontrollers. It was initially developed by http://dunkels.com/adam/[Adam Dunkels] while at the https://en.wikipedia.org/wiki/Swedish_Institute_of_Computer_Science[Swedish Institute of Computer Science (SICS)], licensed under a BSD style license, and further developed by a wide group of developers.

The implementation details of the uIP/uIPv6 is out of the scope of this section.  The remainder of this sections explain the basic configurations at the platform and application level.

To enable IPv6 the following has to be defined, either in the application's `Makefile` or its `project-conf.h` file:

[source, c]
----
#define UIP_CONF_IPV6  1
----

[source, c]
----
#ifndef NBR_TABLE_CONF_MAX_NEIGHBORS
#define NBR_TABLE_CONF_MAX_NEIGHBORS        20
#endif
#ifndef UIP_CONF_MAX_ROUTES
#define UIP_CONF_MAX_ROUTES                 20
#endif

/* uIP */
#ifndef UIP_CONF_BUFFER_SIZE
#define UIP_CONF_BUFFER_SIZE              1300
#endif

#define UIP_CONF_IPV6_QUEUE_PKT              0
#define UIP_CONF_IPV6_CHECKS                 1
#define UIP_CONF_IPV6_REASSEMBLY             0
#define UIP_CONF_MAX_LISTENPORTS             8
----

==== RPL

There are several routing flavours to chose, but ultimately all do the same thing: ensure packets arrive at the right destination.  This is done in different ways depending on factors such as the routing metric (how a route is qualified as better than others), whether the routing is done dinamically or statically, etc.

In Contiki the default routing protocol is RPL.  Other protocols such as Ad hoc On-Demand Distance Vector (AODV) are out of the scope of this section.

The specifics of the RPL implementation are out of the scope of this section, we merely describe the common configurations and provide a brief introduction to RPL.  For more details, check the RPL implementation at `core/net/rpl`.

.What is RPL?
****
RPL is IPv6 routing protocol for low power and lossy networks designed by the IETF Routing Over Low power and Lossy network (ROLL) group, used as the defacto routing protocol in Contiki.  RPL is a proactive distance vector protocol, it starts finding the routes as soon as the RPL network is initialized.

image::./images/4/image005.jpg[]

It supports three traffic patterns:

* Multipoint-to-point (MP2P)
* Point-to-multipoint (P2MP)
* Point-to-point (P2P)

RPL builds a Destination Oriented DAGs (DODAGs) rooted towards one sink (DAG ROOT) identified by a unique identifier DODAGID.  The DODAGs are optimized using an Objective Function (OF) metric identified by an Objective Code Point (OCP), which indicates the dynamic constraints and the metrics such as hop count, latency, expected transmission count, parents selection, energy, etc.  A rank number is assigned to each node which can be used to determine its relative position and distance to the root in the DODAG.

Within a given network, there may be multiple, logically independent RPL instances.  An RPL node may belong to multiple RPL instances, and may act as a router in some and as a leaf in others.  A set of multiple DODAGs can be in an RPL INSTANCE and a node can be a member of multiple RPL INSTANCEs, but can belong to at most one DODAG per DAG INSTANCE.

A trickle timer mechanism regulates DODAG Information Object (DIO) message transmissions, which are used to build and maintain upwards routes of the DODAG, advertising its RPL instance, DODAG ID, RANK and DODAG version number.

A node can request DODAG information by sending DODAG Information Solicitation messages (DIS), soliciting DIO messages from its neighborhoods to update its routing information and join an instance.

Nodes have to monitor DIO messages before joining a DODAG, and then join a DODAG by selecting a parent Node from its neighbors using its advertised latency, OF and RANK.  Destination Advertisement Object (DAO) messages are used to maintain downward routes by selecting the preferred parent with lower rank and sending a packet to the DAG ROOT through each of the intermediate Nodes.

RPL has two mechanisms to repair the topology of the DODAG, one to to avoid looping and allow nodes to join/rejoin, and other called global repair. Global repair is initiated at the DODAG ROOT by incrementing the DODAG Version Number to create a new DODAG Version.

More information about RPL can be found in https://tools.ietf.org/html/rfc6550[RFC6550].
****

Routing support is enabled as default in the *Z1 mote* and  *RE-Mote* platform.  To enable routing the following has to be enabled:

[source, c]
----
#ifndef UIP_CONF_ROUTER
#define UIP_CONF_ROUTER  1
#endif
----

To enable RPL add the following to your application's `Makefile` or its `project-conf.h` file.

[source, c]
----
#define UIP_CONF_IPV6_RPL  1
----

The following is the default configuration done in the *RE-Mote*:

[source, c]
----
/* ND and Routing */
#define UIP_CONF_ND6_SEND_RA        0  <1>
#define UIP_CONF_IP_FORWARD         0  <2>
#define RPL_CONF_STATS              0  <3>
----
<1> Disable sending routing advertisements
<2> Disable IP forwarding
<3> RPL Configuration statistics are disabled

The `RPL_CONF_OF` parameter configures the RPL objective function.  The Minimum Rank with Hysteresis Objective Function (MRHOF) uses ETX as routing metric and it also has stubs for energy metric.

[source, c]
----
#ifndef RPL_CONF_OF
#define RPL_CONF_OF rpl_mrhof
#endif
----

The Expected Transmissions metric (ETX) measure how many tries it takes until an acknowledgment of a sent packet (ACK) is received, keeping a moving average for each neighbors, computing the sum of all ETXes to build the routes.

As default Contiki uses `storing mode` for RPL downward routes.  Basically all nodes store in a routing table the addresses of its child nodes.

==== Set up a sniffer

A packet sniffer is a must-have tool for any wireless network application, it allows to see what are you transmitting over the air, verifying both that the transmissions are taking place, the frames/packets are properly formatted, and that the communication is happening on a given channel.

There are commercial options available, such as the Texas Instruments http://www.ti.com/tool/packet-sniffer[SmartRF packet Sniffer], which can be used with a http://www.ti.com/tool/CC2531EMK[CC2531 USB dongle] to capture packets like the one below.

image::./images/4/image006.png[]

We will use for this practice the https://github.com/g-oikonomou/sensniff[SenSniff] application, paired with a *RE-Mote* and Wireshark (already installed in instant Contiki).  This setup will allow us to understand how the wireless communication is done in Contiki.

To program the *RE-Mote* as a packet Sniffer:

[source, bash]
----
cd examples/cc2538dk/sniffer
----

Compile and program:

[source, bash]
----
make TARGET=remote sniffer.upload
----

[NOTE]
====
At the moment of writting this section the Z1 sniffer was not officially included in Contiki, however a branch with the implementation is available at:
https://github.com/alignan/contiki/tree/z1_sniffer/examples/z1/sniffer
====

Open a new terminal, and clone the sensniff project in your home folder:

[source, bash]
----
cd $HOME
git clone https://github.com/g-oikonomou/sensniff
cd sensniff/host
----

Then launch the sensniff application with the following command:

[source, bash]
----
python sensniff.py --non-interactive -d /dev/ttyUSB0 -b 115200
----

Sensniff will read data from the mote over the serial port, dissect the frames and pipe to `/tmp/sensniff` by default, now we need to connect the other extreme of the pipe to wireshark, else you will get the following warning:

[source, bash]
----
 "Remote end not reading"
----

Which is not worrysome, it only means that the other pipe endpoint is not connected.  You can also save the sniffed frames to open later with wireshark, adding the following argument to the above command `-p name.pcap`, which will save the session output in a `name.pcap` file.  Change the naming and location where to store the file accordingly.

[NOTE]
====
At the moment of writing this tutorial changing channels from the Sensniff application was not implemented but proposed as a feature, check the Sensniff’s `README.md` for changes and current status.
====

Open another terminal and launch wireshark with the following command, which will add the pipe as a capture interface:

[source, bash]
----
sudo wireshark -i /tmp/sensniff
----

Select the `/tmp/sensniff` interface from the droplist and click `Start` just above.

image::./images/4/image007.png[]

Make sure that the pipe is configured to capture packets in promiscuous mode, if needed you can increase the buffer size, but 1MB is normally enough.

image::./images/4/image008.png[]

Now the captured frames should start to appear on screen.

image::./images/4/image009.png[]

You can add specific filters to limit the frames being shown on screen, for this example click at the `Expression` button and a list of available attributes per protocol are listed, scroll down until IEEE 802.15.4 and check the available filters.  You can also chain different filter arguments using the `Filter` box, in this case we only wanted to check the frames belonging to the `PAN 0xABCD` and coming from node `c1:0c::0309`, so we used the `wpan.dst_pan` and  `wpan.src64` attributes.

image::./images/4/image010.png[]

When closing the Sensniff python application, a session information is provided reporting the statistics:

[source, bash]
----
Frame Stats:
         Non-Frame: 6
         Not Piped: 377
    Dumped to PCAP: 8086
             Piped: 7709
          Captured: 8086
----

TIP: Excercise: sniff the traffic! try to filter outgoing and incoming data packets using your own custom rules.

==== The Border Router

The border router or edge router is typically a device sitting at the edge of our network, which allow us to talk to outside networks using its built-in network interfaces, such as WiFI, Ethernet, Serial, etc.

image::./images/4/image011.jpg[]

In Contiki the current and most used border router application implements a serial-based interface called SLIP, it allows to connect a given mote to a host using scripts like `tunslip6` in `tools/tunslip6` over the serial port, creating a tunneled network interface, which can be given an IPv6 prefix to set the network global IPv6 addresses.

The border router application is located at `examples/ipv6/rpl-border-router`, the following code snippets are the most relevant:

[source, c]
----
/* Request prefix until it has been received */
while(!prefix_set) {
   etimer_set(&et, CLOCK_SECOND);
   request_prefix();
   PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));
}

dag = rpl_set_root(RPL_DEFAULT_INSTANCE,(uip_ip6addr_t *)dag_id);
if(dag != NULL) {
   rpl_set_prefix(dag, &prefix, 64);
   PRINTF("created a new RPL dag\n");
}
----

The snippet above bootstrap until a valid prefix has been given.  Once the prefix has been assigned, the node will set the prefix and convert itself as the root node (DODAG).

Normally is preferable to configure the border router as a non-sleeping device, so the radio receiver is always on.  You can configure the border router settings using the `project-conf.h` file.

[source, c]
----
#undef NETSTACK_CONF_RDC
#define NETSTACK_CONF_RDC       nullrdc_driver
----

By default the border-router applications includes a built-in web server, displaying information about the network, such as the immediate neighbors (1-hop located) and the known routes to nodes in its network.  To enable the web server, the `WITH_WEBSERVER` flag should be enabled, and by default it will add the `httpd-simple.c` application.

===== Hands on: installing the border router

The following assumes to use a *RE-Mote* platfor, but the *Z1 mote* can be used as well.

[source, bash]
----
make TARGET=remote savetarget
----

To compile, flash the mote and connect the border router to your host run:

[source, bash]
----
make border-router.upload && make connect-router
----

By default it will try to connect to a mote at port `/dev/ttyUSB0` using the following serial settings:  115200 baudrate, 8 bits, No parity and 1 bit stop.  If you do not specify an IPv6 prefix it will use the default `aaaa::1/64`, to specify a specific one run the tunslip tool instead using the following:

[source, bash]
----
make connect-router PREFIX=2001:abcd:dead:beef::1/64
----

You can also compile and run the `tunslip6` tool directly from the tools location, to compile just type:

[source, bash]
----
cd tools
cc tunslip6.c -o tunslip6
----

And to run with specific arguments, i.e. connect to a specific serial port, name your tunnel connection with a specific name, or proxify to a given address and port, use the following:

[source, bash]
----
./tunslip -s /dev/ttyUSB0 -t tun0 2001:abcd:dead:beef::1/64
----

Run `tunslip -H` for more information.

[TIP]
====
http://cetic.github.io/6lbr/[6lbr] is a deployment-ready 6LoWPAN border router solution based on Contiki, it has support for the *Z1 mote* and in short time for the *RE-Mote* platform (the CC2538dk is already supported, porting is trivial).  To take your border router to the next level, this is the tool you have been looking for.
====

=== UDP and TCP basics

Now that we have covered the mote configurations and the MAC and routing layers, let us set up an UDP network.

.What is UDP?
****
UDP (User Datagram Protocol) is a communications protocol that offers a limited amount of service when messages are exchanged between devices in a network that uses the Internet Protocol (IP).

UDP is an alternative to the Transmission Control Protocol (TCP) and, together with IP, is sometimes referred to as UDP/IP. Like the Transmission Control Protocol, UDP uses the Internet Protocol to actually get a data unit (called a datagram) from one computer to another.

Unlike TCP, UDP does not provide message fragmentation and reassembling at the other end, this means that the application must be able to make sure that the entire message has arrived and is in the right order.

Network applications that want to save processing time because they have very small data units to exchange (and therefore very little message reassembling to do) may prefer UDP to TCP
****

The UDP implementation is Contiki resides in `core/net/ip`.  The remainder of the section will focus on describing the UDP available functions.

===== The UDP API

We need to create a socket for the connection, this is done using the `udp_socket` structure, which has the following elements:

[source, c]
----
struct udp_socket {
  udp_socket_input_callback_t input_callback;
  void *ptr;
  struct process *p;
  struct uip_udp_conn *udp_conn;
};
----

After creating the UDP socket structure, we need to register the UDP socket.  This is done with the `udp_socket_register`.  

[source, c]
----
/**
 * \brief      Register a UDP socket
 * \param c    A pointer to the struct udp_socket that should be registered
 * \param ptr  An opaque pointer that will be passed to callbacks
 * \param receive_callback A function pointer to the callback function that will be called when data arrives
 * \retval -1  The registration failed
 * \retval 1   The registration succeeded
 */
int udp_socket_register(struct udp_socket *c,
                        void *ptr,
                        udp_socket_input_callback_t receive_callback);
----

As the UDP socket has been created and registered, let us listen on a given port.  The `udp_socket_bind` function binds the UDP socket to a local port so it will begin to receive data that arrives on the specified port. A UDP socket will receive data addressed to the specified port number on any IP address of the host.  An UDP socket bound to a local port will use this port number as source port for outgoing UDP messages.

[source, c]
----
 * \brief      Bind a UDP socket to a local port
 * \param c    A pointer to the struct udp_socket that should be bound to a local port
 * \param local_port The UDP port number, in host byte order, to bind the UDP socket to
 * \retval -1  Binding the UDP socket to the local port failed
 * \retval 1   Binding the UDP socket to the local port succeeded
 */
int udp_socket_bind(struct udp_socket *c,
                    uint16_t local_port);
----

The `udp_socket_connect` function connects the UDP socket to a specific remote port and optional remote IP address. When a UDP socket is connected to a remote port and address, it will only receive packets that are sent from the remote port and address. When sending data over a connected UDP socket, the data will be sent to the connected remote address.
 
A UDP socket can be connected to a remote port, but not to a remote IP address, by providing a `NULL` parameter as the remote_addr parameter.  This lets the UDP socket receive data from any IP address on the specified port.

[source, c]
----
/**
 * \brief      Bind a UDP socket to a remote address and port
 * \param c    A pointer to the struct udp_socket that should be connected
 * \param remote_addr The IP address of the remote host, or NULL if the UDP socket should only be connected to a specific port
 * \param remote_port The UDP port number, in host byte order, to which the UDP socket should be connected
 * \retval -1  Connecting the UDP socket failed
 * \retval 1   Connecting the UDP socket succeeded
 */
int udp_socket_connect(struct udp_socket *c,
                       uip_ipaddr_t *remote_addr,
                       uint16_t remote_port);
----

To send data over a connected UDP socket it must have been connected to a remote address and port with `udp_socket_connect`.

[source, c]
----
/**
 * \brief      Send data on a UDP socket
 * \param c    A pointer to the struct udp_socket on which the data should be sent
 * \param data A pointer to the data that should be sent
 * \param datalen The length of the data to be sent
 * \return     The number of bytes sent, or -1 if an error occurred
 */
int udp_socket_send(struct udp_socket *c,
                    const void *data, uint16_t datalen);
----

To send data over an UDP socket without being connected we use the function `udp_socket_sendto` instead.

[source, c]
----
/**
 * \brief      Send data on a UDP socket to a specific address and port
 * \param c    A pointer to the struct udp_socket on which the data should be sent
 * \param data A pointer to the data that should be sent
 * \param datalen The length of the data to be sent
 * \param addr The IP address to which the data should be sent
 * \param port The UDP port number, in host byte order, to which the data should be sent
 * \return     The number of bytes sent, or -1 if an error occurred
 */
int udp_socket_sendto(struct udp_socket *c,
                      const void *data, uint16_t datalen,
                      const uip_ipaddr_t *addr, uint16_t port);
----

To close an UDP socket previously registered with `udp_socket_register` the below function is used.  All registered UDP sockets must be closed before exiting the process that registered them, or undefined behavior may occur.

[source, c]
----
/**
 * \brief      Close a UDP socket
 * \param c    A pointer to the struct udp_socket to be closed
 * \retval -1  If closing the UDP socket failed
 * \retval 1   If closing the UDP socket succeeded
 */
int udp_socket_close(struct udp_socket *c);
----

Each UDP socket has a callback function that is registered as part of the call to `udp_socket_register`. The callback function gets called every time a UDP packet is received.

[source, c]
----
/**
 * \brief      A UDP socket callback function
 * \param c    A pointer to the struct udp_socket that received the data
 * \param ptr  An opaque pointer that was specified when the UDP socket was registered with udp_socket_register()
 * \param source_addr The IP address from which the datagram was sent
 * \param source_port The UDP port number, in host byte order, from which the datagram was sent
 * \param dest_addr The IP address that this datagram was sent to
 * \param dest_port The UDP port number, in host byte order, that the datagram was sent to
 * \param data A pointer to the data contents of the UDP datagram
 * \param datalen The length of the data being pointed to by the data pointer
 */
typedef void (* udp_socket_input_callback_t)(struct udp_socket *c,
                                             void *ptr,
                                             const uip_ipaddr_t *source_addr,
                                             uint16_t source_port,
                                             const uip_ipaddr_t *dest_addr,
                                             uint16_t dest_port,
                                             const uint8_t *data,
                                             uint16_t datalen);
----

Alternatively there is another UDP library called `simple-udp`, which simplifies the UDP API to fewer functions.  The library is located in `core/net/ip/simple-udp.c`.  For the next example we are going to use the `simple-udp` library, to show how to create a very first basic broadcast example.  In a later example we will come back to the full-fledged UDP API.

===== Hands on: UDP example

The objective of this example is to grasp the concepts shown in the sections before.  We will create an UDP broadcast application using the `simple-udp`.

There is an existing UDP broadcast example which uses RPL, located at:

[source, bash]
----
cd examples/ipv6/simple-udp-rpl
----

Open the `broadcast-example.c` and the `Makefile`. Let’s see the contents of the `Makefile`:

[source, c]
----
UIP_CONF_IPV6=1
CFLAGS+= -DUIP_CONF_IPV6_RPL
----

The above adds the IPv6 stack and RPL routing protocol to our application.

The `broadcast-example.c` contains:

[source, c]
----
#include "net/ip/uip.h"
----

This is the main uIP library.

[source, c]
----
/* Network interface and stateless autoconfiguration */
#include "net/ipv6/uip-ds6.h"

/* Use simple-udp library, at core/net/ip/ */
/* The simple-udp module provides a significantly simpler API. */
#include "simple-udp.h"
static struct simple_udp_connection broadcast_connection;
----

This structure allows to store the UDP connection information and mapped callback in which to process any received message.  It is initialized below in the following call:

[source, c]
----
simple_udp_register(&broadcast_connection, UDP_PORT, NULL, UDP_PORT, receiver);
----

This passes to the simple-udp application the ports from/to handle the broadcasts, and the callback function to handle received broadcasts.  We pass the NULL parameter as the destination address to allow packets from any address.

The receiver callback function is shown below:

[source, c]
----
receiver(struct simple_udp_connection *c,
       const uip_ipaddr_t *sender_addr,
       uint16_t sender_port,
       const uip_ipaddr_t *receiver_addr,
       uint16_t receiver_port,
       const uint8_t *data,
       uint16_t datalen);
----

This application first sets a timer and when the timer expires it sets a randomly generated new timer interval (between 1 and the sending interval) to avoid flooding the network. Then it sets the IP address to the link local all-nodes multicast address as follows:

[source, c]
----
uip_create_linklocal_allnodes_mcast(&addr);
----

And then use the `broadcast_connection` structure (with the values passed at register) and send our data over UDP.

[source, c]
----
simple_udp_sendto(&broadcast_connection, "Test", 4, &addr);
----

To extend the available address information, theres a library which already allows to print the IPv6 addresses in a friendlier way, add this to the top of the file:

[source, c]
----
#include "debug.h"
#define DEBUG DEBUG_PRINT
#include "net/ip/uip-debug.h"
----

So we can now print the multicast address, add this before the `simple_udp_sendto(...)` call:

[source, c]
----
PRINT6ADDR(&addr);
printf("\n");
----

Now let’s modify our receiver callback and print more information about the incoming message, replace the existing receiver code with the following:

[source, c]
----
static void
receiver(struct simple_udp_connection *c,
       const uip_ipaddr_t *sender_addr,
       uint16_t sender_port,
       const uip_ipaddr_t *receiver_addr,
       uint16_t receiver_port,
       const uint8_t *data,
       uint16_t datalen)
{
  /* Modified to print extended information */
  printf("\nData received from: ");
  PRINT6ADDR(sender_addr);
  printf("\nAt port %d from port %d with length %d\n",
        receiver_port, sender_port, datalen);
  printf("Data Rx: %s\n", data);
}
----

Before uploading your code, override the default target by writing in the terminal:

[source, bash]
----
make TARGET=remote savetarget
----

Remember you can also use the *Z1 mote* as target.

Now clean any previous compiled code, compile, upload your code and then restart the mote, and print the serial output to screen (all in one command!):

[source, bash]
----
make clean && make broadcast-example.upload && make login
----

TIP: Upload this code to at least 2 motes and send/receive messages from neighbors.  If you have more than 1 mote connected in your PC, remember to use the `PORT=/dev/ttyUSBx` argument in the upload, reset and login commands!

You will see the following result:

[source, bash]
----
Rime started with address 193.12.0.0.0.0.0.158
MAC c1:0c:00:00:00:00:00:9e Ref ID: 3301
Contiki-2.6-1803-g03f57ae started. Node id is set to 158.
CSMA ContikiMAC, channel check rate 8 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:009e
Starting 'UDP broadcast example process'
Sending broadcast to -> ff02::1

Data received from: fe80::c30c:0:0:309
At port 1234 from port 1234 with length 4
Data Rx: Test
Sending broadcast to -> ff02::1
----

TIP: Exercise:  Write down the node ID of other motes. This will be useful for later.  At this point you should also use the Sniffer and capture data over Wireshark.

To change the sending interval you can also modify the values at:

[source, c]
----
#define SEND_INTERVAL  (20 * CLOCK_SECOND)
#define SEND_TIME      (random_rand() % (SEND_INTERVAL))
----

===== Hands on: connecting an IPv6 UDP network to our host

In the `udp-client.c` file at `examples/ipv6/rpl-udp`. set the server address to be `aaaa::1` (the host address), replace the options there (Mode 2 is default) and add:

[source, c]
----
uip_ip6addr(&server_ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 1);
----

To verify that we have set the address correctly let's print the server address, in the `print_local_addresses` function add this to the end:

[source, c]
----
PRINTF("Server address: ");
PRINT6ADDR(&server_ipaddr);
PRINTF("\n");
----

The UDP connection is created in the following block:

[source, c]
----
/* new connection with remote host */
client_conn = udp_new(NULL, UIP_HTONS(UDP_SERVER_PORT), NULL);
if(client_conn == NULL) {
  PRINTF("No UDP connection available, exiting the process!\n");
  PROCESS_EXIT();
}
udp_bind(client_conn, UIP_HTONS(UDP_CLIENT_PORT));
----

And upon receiving a message the `tcpip_handler` is called to process the incoming data:

[source, c]
----
static void
tcpip_handler(void)
{
  char *str;

  if(uip_newdata()) {
    str = uip_appdata;
    str[uip_datalen()] = '\0';
    printf("DATA recv '%s'\n", str);
  }
}
----

Compile and program the mote:

[source, bash]
----
cd examples/ipv6/rpl-udp
make TARGET=z1 savetarget
make udp-client.upload && make z1-reset && make login

Rime started with address 193.12.0.0.0.0.0.158
MAC c1:0c:00:00:00:00:00:9e Ref ID: 158
Contiki-2.6-2071-gc169b3e started. Node id is set to 158.
CSMA ContikiMAC, channel check rate 8 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:009e
Starting 'UDP client process'
UDP client process started
Client IPv6 addresses: aaaa::c30c:0:0:9e
fe80::c30c:0:0:9e
Server address: aaaa::1
Created a connection with the server :: local/remote port 8765/5678
DATA send to 1 'Hello 1'
DATA send to 1 'Hello 2'
DATA send to 1 'Hello 3'
DATA send to 1 'Hello 4'
----

Remember that you can also compile for the *RE-Mote* platform.

*UDP Server*

The UDP server is a python script that echoes any incoming data back to the client, useful to test the bi-directional communication between the host and the network.

The `UDP6.py` script can be executed as a single-shot UDP client or as a UDP Server binded to a specific address and port, for this example we are to bind to address `aaaa::1` and port `5678`.

The script content is below:

[source, python]
----
#! /usr/bin/env python

import sys
from socket import *
from socket import error

PORT      = 5678
BUFSIZE   = 1024

#------------------------------------------------------------#
# Start a client or server application for testing
#------------------------------------------------------------#
def main():
        if len(sys.argv) < 2:
                usage()
        if sys.argv[1] == '-s':
                server()
        elif sys.argv[1] == '-c':
                client()
        else:
                usage()

#------------------------------------------------------------#
# Prints the instructions
#------------------------------------------------------------#
def usage():
        sys.stdout = sys.stderr
        print 'Usage: udpecho -s [port]            (server)'
        print 'or:    udpecho -c host [port] <file (client)'
        sys.exit(2)

#------------------------------------------------------------#
# Creates a server, echoes the message back to the client
#------------------------------------------------------------#
def server():
    if len(sys.argv) > 2:
        port = eval(sys.argv[2])
    else:
        port = PORT

    try:
        s = socket(AF_INET6, SOCK_DGRAM)
        s.bind(('aaaa::1', port))
    except Exception:
        print "ERROR: Server Port Binding Failed"
        return
    print 'udp echo server ready: %s' % port
    while 1:
        data, addr = s.recvfrom(BUFSIZE)
        print 'server received', `data`, 'from', `addr`
        s.sendto(data, addr)

#------------------------------------------------------------#
# Creates a client that sends an UDP message to a server
#------------------------------------------------------------#
def client():
    if len(sys.argv) < 3:
        usage()
    host = sys.argv[2]
    if len(sys.argv) > 3:
        port = eval(sys.argv[3])
    else:
        port = PORT
    addr = host, port
    s = socket(AF_INET6, SOCK_DGRAM)
    s.bind(('', 0))
        print 'udp echo client ready, reading stdin'
    try:
        s.sendto("hello", addr)
    except error as msg:
        print msg
    data, fromaddr = s.recvfrom(BUFSIZE)
    print 'client received', `data`, 'from', `fromaddr`

#------------------------------------------------------------#
# MAIN APP
#------------------------------------------------------------#
main()
----

To execute the `UDP6.py` script just run:

[source, bash]
----
python UDP6.py -s 5678
----

This is the expected output when running and receiving an UDP packet:

[source, bash]
----
udp echo server ready: 5678
server received 'Hello 198 from the client' from ('aaaa::c30c:0:0:9e', 8765, 0, 0)
----

The Server then echoes back the message to the UDP client to the given `8765` port, this is the expected output from the mote:

[source, bash]
----
DATA send to 1 'Hello 198'
DATA recv 'Hello 198 from the client'
----

image::./images/4/image012.jpg[]


==== What is TCP?

.What is TCP?
****
The Transmission Control Protocol (TCP) is a core protocol of the Internet Protocol (IP).

TCP is a reliable stream delivery service that ensures all bytes received will be in the correct order. It uses a technique known as positive acknowledgment with retransmission to guarantee reliability of packet transfers.  TCP handles the received fragments and reorders the data.

Applications that do not require reliable data stream service may use the User Datagram Protocol (UDP), which provides a connectionless datagram service that emphasizes reduced latency over reliability.

TCP is commonly used by HTTP, FTP, email and anny connection-oriented service.
****

The TCP implementation is Contiki resides in `core/net/ip`.  The remainder of the section will focus on describing the TCP available functions.

===== The TCP API

We need to create a socket for the connection, this is done using the `tcp_socket` structure, which has the following elements:

[source, c]
----
struct tcp_socket {
  struct tcp_socket *next;

  tcp_socket_data_callback_t input_callback;
  tcp_socket_event_callback_t event_callback;
  void *ptr;

  struct process *p;

  uint8_t *input_data_ptr;
  uint8_t *output_data_ptr;

  uint16_t input_data_maxlen;
  uint16_t input_data_len;
  uint16_t output_data_maxlen;
  uint16_t output_data_len;
  uint16_t output_data_send_nxt;
  uint16_t output_senddata_len;
  uint16_t output_data_max_seg;

  uint8_t flags;
  uint16_t listen_port;
  struct uip_conn *c;
};
----

Socket status:

[source, c]
----
enum {
  TCP_SOCKET_FLAGS_NONE      = 0x00,
  TCP_SOCKET_FLAGS_LISTENING = 0x01,
  TCP_SOCKET_FLAGS_CLOSING   = 0x02,
};
----

After creating the TCP socket structure, we need to register the TCP socket.  This is done with the `tcp_socket_register`, which takes as arguments the TCP socket, and input/output buffers to use for sending and receiving data.  Be sure to dimension these buffers according to the expected data to be sent and received.

[source, c]
----
/**
 * \brief      Register a TCP socket
 * \param s    A pointer to a TCP socket
 * \param ptr  A user-defined pointer that will be sent to callbacks for this socket
 * \param input_databuf A pointer to a memory area this socket will use for input data
 * \param input_databuf_len The size of the input data buffer
 * \param output_databuf A pointer to a memory area this socket will use for outgoing data
 * \param output_databuf_len The size of the output data buffer
 * \param data_callback A pointer to the data callback function for this socket
 * \param event_callback A pointer to the event callback function for this socket
 * \retval -1  If an error occurs
 * \retval 1   If the operation succeeds.
 */
int tcp_socket_register(struct tcp_socket *s, void *ptr,
                         uint8_t *input_databuf, int input_databuf_len,
                         uint8_t *output_databuf, int output_databuf_len,
                         tcp_socket_data_callback_t data_callback,
                         tcp_socket_event_callback_t event_callback);
----

As the TCP socket has been created and registered, let us listen on a given port.  When a remote host connects to the port, the event callback will be called with the `TCP_SOCKET_CONNECTED` event.  When the connection closes, the socket will go back to listening.

[source, c]
----
/**
 * \brief      Start listening on a specific port
 * \param s    A pointer to a TCP socket that must have been previously registered with tcp_socket_register()
 * \param port The TCP port number, in host byte order, of the remote host
 * \retval -1  If an error occurs
 * \retval 1   If the operation succeeds.
 */
int tcp_socket_listen(struct tcp_socket *s,
                      uint16_t port);
----

To stop listening on a given TCP port, just call the following function:

[source, c]
----
/**
 * \brief      Stop listening for new connections
 * \param s    A pointer to a TCP socket that must have been previously registered with tcp_socket_register()
 * \retval -1  If an error occurs
 * \retval 1   If the operation succeeds.
 */
int tcp_socket_unlisten(struct tcp_socket *s);
----

We can connect the TCP socket to a remote host.  When the socket has connected, the event callback will get called with the `TCP_SOCKET_CONNECTED` event. If the remote host does not accept the connection, the `TCP_SOCKET_ABORTED` will be sent to the callback. If the connection times out before conecting to the remote host, the `TCP_SOCKET_TIMEDOUT` event is sent to the callback.

[source, c]
----
/**
 * \brief      Connect a TCP socket to a remote host
 * \param s    A pointer to a TCP socket that must have been previously registered with tcp_socket_register()
 * \param ipaddr The IP address of the remote host
 * \param port The TCP port number, in host byte order, of the remote host
 * \retval -1  If an error occurs
 * \retval 1   If the operation succeeds.
 */
int tcp_socket_connect(struct tcp_socket *s,
                       const uip_ipaddr_t *ipaddr,
                       uint16_t port);
----

As we are using an output buffer to send data over the TCP socket, a good practice is to query the TCP socket and check the number of bytes available.

[source, c]
----
/**
 * \brief      The maximum amount of data that could currently be sent
 * \param s    A pointer to a TCP socket
 * \return     The number of bytes available in the output buffer
 */
int tcp_socket_max_sendlen(struct tcp_socket *s);
----

To send data over a connected TCP socket the data is placed in the output buffer.  When the data has been acknowledged by the remote host, the event callback is sent with the `TCP_SOCKET_DATA_SENT` event.

[source, c]
----
/**
 * \brief      Send data on a connected TCP socket
 * \param s    A pointer to a TCP socket that must have been previously registered with tcp_socket_register()
 * \param dataptr A pointer to the data to be sent
 * \param datalen The length of the data to be sent
 * \retval -1  If an error occurs
 * \return     The number of bytes that were successfully sent
 */
int tcp_socket_send(struct tcp_socket *s,
                    const uint8_t *dataptr,
                    int datalen);
----

Alternatively we can send a string over a TCP socket as follows:

[source, c]
----
/**
 * \brief      Send a string on a connected TCP socket
 * \param s    A pointer to a TCP socket that must have been previously registered with tcp_socket_register()
 * \param strptr A pointer to the string to be sent
 * \retval -1  If an error occurs
 * \return     The number of bytes that were successfully sent
 */
int tcp_socket_send_str(struct tcp_socket *s,
                        const char *strptr);
----

To close a connected TCP socket the below function is used.  The event callback is called with the `TCP_SOCKET_CLOSED` event.

[source, c]
----
/**
 * \brief      Close a connected TCP socket
 * \param s    A pointer to a TCP socket that must have been previously registered with tcp_socket_register()
 * \retval -1  If an error occurs
 * \retval 1   If the operation succeeds.
 */
int tcp_socket_close(struct tcp_socket *s);
----

And to unregister a TCP socket the `tpc_socket_unregister` function is used.  This function can also be used to reset a connected TCP socket.

[source, c]
----
/**
 * \brief      Unregister a registered socket
 * \param s    A pointer to a TCP socket that must have been previously registered with tcp_socket_register()
 * \retval -1  If an error occurs
 * \retval 1   If the operation succeeds.
 *
 *             This function unregisters a previously registered
 *             socket. This must be done if the process will be
 *             unloaded from memory. If the TCP socket is connected,
 *             the connection will be reset.
 *
 */
int tcp_socket_unregister(struct tcp_socket *s);
----

The TCP socket event callback function gets called whenever there is an event on a socket, such as the socket getting connected or closed.

[source, c]
----
/**
 * \brief      TCP event callback function
 * \param s    A pointer to a TCP socket
 * \param ptr  A user-defined pointer
 * \param event The event number
 */
typedef void (* tcp_socket_event_callback_t)(struct tcp_socket *s,
                                             void *ptr,
                                             tcp_socket_event_t event);
----


The TCP data callback function has to be added to the application, it will get called whenever there is new data on the socket:

[source, c]
----
/**
 * \brief      TCP data callback function
 * \param s    A pointer to a TCP socket
 * \param ptr  A user-defined pointer
 * \param input_data_ptr A pointer to the incoming data
 * \param input_data_len The length of the incoming data
 * \return     The function should return the number of bytes to leave in the input buffer
 */
typedef int (* tcp_socket_data_callback_t)(struct tcp_socket *s,
                                           void *ptr,
                                           const uint8_t *input_data_ptr,
                                           int input_data_len);
----

===== Hands on: TCP example

Now let us put to practice the TCP API described before and browse a TCP application.  The `tpc-socket` example is located in `examples/tcp-socket`.  The TCP server simply echoes back the request done on the port 80.

The `Makefile` enables as default the IPv4 stack, change it to IPv6:

[source, c]
----
UIP_CONF_IPV6=1
CFLAGS+= -DUIP_CONF_IPV6_RPL
----

Then let us open the `tcp-server.c` example and browse the implementation.

The port 80 will be used for the TCP server to receive remote connections.  As shown earlier we need to create a `tcp_socket` structure, and use two separately input/output buffers to send and receive data.

[source, c]
----
#define SERVER_PORT 80

static struct tcp_socket socket;

#define INPUTBUFSIZE 400
static uint8_t inputbuf[INPUTBUFSIZE];

#define OUTPUTBUFSIZE 400
static uint8_t outputbuf[OUTPUTBUFSIZE];
----

These two variables will be used to count the number of bytes received, and the ones to be sent.

[source, c]
----
static uint8_t get_received;
static int bytes_to_send;
----

As commented earlier, we need to include a `tcp_socket_event_callback_t` to handle events.

[source, c]
----
static void
event(struct tcp_socket *s, void *ptr,
      tcp_socket_event_t ev)
{
  printf("event %d\n", ev);
}
----

We register the TCP socket and pass as a pointer the `tcp_socket` structure, the data buffers, and our callback handlers.  Next we start listening for connections on the port 80.

[source, c]
----
tcp_socket_register(&socket, NULL,
               inputbuf, sizeof(inputbuf),
               outputbuf, sizeof(outputbuf),
               input, event);

tcp_socket_listen(&socket, SERVER_PORT);
----

The `input` callback handler receives the data, prints the string and its length, then if the received string is a complete request we save the number of bytes received into `bytes_to_send` (the `atoi` function converts string numbers into integers).  If the received string is not complete, we return the number of bytes received to the driver to keep the data in the input buffer.

[source, c]
----
static int
input(struct tcp_socket *s, void *ptr,
      const uint8_t *inputptr, int inputdatalen)
{
  printf("input %d bytes '%s'\n", inputdatalen, inputptr);
  if(!get_received) {
    /* See if we have a full GET request in the buffer. */
    if(strncmp((char *)inputptr, "GET /", 5) == 0 &&
       atoi((char *)&inputptr[5]) != 0) {
      bytes_to_send = atoi((char *)&inputptr[5]);
      printf("bytes_to_send %d\n", bytes_to_send);
      return 0;
    }
    printf("inputptr '%.*s'\n", inputdatalen, inputptr);
    /* Return the number of data bytes we received, to keep them all
       in the buffer. */
    return inputdatalen;
  } else {
    /* Discard everything */
    return 0; /* all data consumed */
  }
}
----

The application will wait for an event to happen, in this case the incoming connection from above.  After the event is handled, the code inside the `while()` loop and after the `PROCESS_PAUSE()` will be executed.

[source, c]
----
while(1) {
  PROCESS_PAUSE();
----

If we have previously received a complete request, we echo it back over the TCP socket.  We use the `tcp_socket_send_str` function to send the header of the response as a string.  The remainder of the data is sent until the `bytes_to_send` counter is empty.

[source, c]
----
    if(bytes_to_send > 0) {
      /* Send header */
      printf("sending header\n");
      tcp_socket_send_str(&socket, "HTTP/1.0 200 ok\r\nServer: Contiki tcp-socket example\r\n\r\n");

      /* Send data */
      printf("sending data\n");
      while(bytes_to_send > 0) {
        PROCESS_PAUSE();
        int len, tosend;
        tosend = MIN(bytes_to_send, sizeof(outputbuf));
        len = tcp_socket_send(&socket, (uint8_t *)"", tosend);
        bytes_to_send -= len;
      }
      tcp_socket_close(&socket);
    }
  }
  PROCESS_END();
}
----

When all the data is echoed back, the TCP socket is closed.
