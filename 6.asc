== Hands on: connecting to the real world

Now prepare the Ubidots application!

=== Ubidots IPv6 example in native Contiki

The example will demonstrate the basic functionality of Contiki's Ubidots library:

* How to use the library to POST to a variable.
* How to use the library to POST to a collection.
* How to receive (parts of) the HTTP reply.

At the present time the Ubidots example was to be merged to Contiki, however the functional
example can be browsed and forked from the following:

https://github.com/g-oikonomou/contiki/tree/ubidots-demo

The Contiki's Ubidots Library was written by George Oikonomou.

The Ubidots example is located at `examples/ipv6/ubidots`.

Ubidots application is implemented at `apps/ubidots`.

Ubidots application uses TCP sockets to connect to the host `things.ubidots.com`, which has the following IPv4 and IPv6 endpoints:

image::./images/6/image001.png[]

To check what's going on enable the debug print statements in the `ubidots.c` file, search for `#define DEBUG DEBUG_NONE` and replace with:

[source, c]
----
#define DEBUG DEBUG_PRINT
----

As we are using NAT64 without a Bind installation to translate A records to AAAA, at `examples/ipv6/ubidots` add this to the `project-conf.h` file:

[source, c]
----
#define UBIDOTS_CONF_REMOTE_HOST "64:ff9b::3217:7c44"
----

The Ubidots demo posts every 30 seconds the Z1 mote's *uptime* and *sequence number*, so as done before in the past sections we need to create these two variables at Ubidots.  Create the data source, its variables and then open `project-conf.h` file and replace the following accordingly:

[source, c]
----
#define UBIDOTS_DEMO_CONF_UPTIME       "XXXX"
#define UBIDOTS_DEMO_CONF_SEQUENCE     "XXXX"
----

The last step is to assign an Ubidot's fixed Short Token so we don't have to request one from time to time when it expires, get one and add this to the `Makefile`, the file should look like this:

[source, c]
----
DEFINES+=PROJECT_CONF_H=\"project-conf.h\"
CONTIKI_PROJECT = ubidots-demo
APPS = ubidots
UBIDOTS_WITH_AUTH_TOKEN=XXXXXXXX
ifdef UBIDOTS_WITH_AUTH_TOKEN
  DEFINES+=UBIDOTS_CONF_AUTH_TOKEN=\"$(UBIDOTS_WITH_AUTH_TOKEN)\"
endif
all: $(CONTIKI_PROJECT)
CONTIKI_WITH_IPV6 = 1
CONTIKI = ../../..
include $(CONTIKI)/Makefile.include
----

Note that you should replace the `UBIDOTS_WITH_AUTH_TOKEN` *without using ""* quotes.

Now everything should be set, let's compile and program a Z1 mote!

[source, bash]
----
make TARGET=z1 savetarget
make clean && make ubidots-demo.upload && make z1-reset && make login
----

You should see the following output:

[source, bash]
----
connecting to /dev/ttyUSB0 (115200) [OK]
Rime started with address 193.12.0.0.0.0.0.158
MAC c1:0c:00:00:00:00:00:9e Ref ID: 158
Contiki-d368451 started. Node id is set to 158.
nullmac nullrdc, channel check rate 128 Hz, radio channel 26
Tentative link-local IPv6 address fe80:0000:0000:0000:c30c:0000:0000:009e
Starting 'Ubidots demo process'
Ubidots client: STATE_ERROR_NO_NET
Ubidots client: STATE_ERROR_NO_NET
Ubidots client: STATE_ERROR_NO_NET
Ubidots client: STATE_STARTING
Ubidots client: Checking 64:ff9b::3217:7c44
Ubidots client: 'Host: [64:ff9b::3217:7c44]' (remaining 44)
Ubidots client: STATE_TCP_CONNECT (1)
Ubidots client: Connect 64:ff9b::3217:7c44 port 80
event_callback: connected
Ubidots client: STATE_TCP_CONNECTED
Ubidots client: Prepare POST: Buffer at 199
Ubidots client: Enqueue value: Buffer at 210
Ubidots client: POST: Buffer at 211, content-length 13 (2), at 143
Ubidots client: POST: Buffer at 208
Ubidots client: STATE_POSTING (176)
Ubidots client: STATE_POSTING (176)
Ubidots client: STATE_POSTING (144)
Ubidots client: STATE_POSTING (112)
Ubidots client: STATE_POSTING (80)
Ubidots client: STATE_POSTING (48)
Ubidots client: STATE_POSTING (16)
Ubidots client: STATE_POSTING (0)
Ubidots client: HTTP Reply 200
HTTP Status: 200
Ubidots client: New header: <Server: nginx>
Ubidots client: New header: <Date: Fri, 13 Mar 2015 09:35:08 GMT>
Ubidots client: New header: <Content-Type: application/json>
Ubidots client: New header: <Transfer-Encoding: chunked>
Ubidots client: New header: <Connection: keep-alive>
Ubidots client: New header: <Vary: Accept-Encoding>
Ubidots client: Client wants header 'Vary'
H: 'Vary: Accept-Encoding'
Ubidots client: New header: <Vary: Accept>
Ubidots client: Client wants header 'Vary'
H: 'Vary: Accept'
Ubidots client: New header: <Allow: GET, POST, HEAD, OPTIONS>
Ubidots client: Chunk, len 22: <[{"status_code": 201}]> (counter = 22)
Ubidots client: Chunk, len 0: <(End of Reply)> (Payload Length 22 bytes)
P: '[{"status_code": 201}]'
----

image::./images/6/image002.png[scaledwidth="75%"]

The values are displayed using a *Multi-line chart* and a *Table-Values* dashboard.
